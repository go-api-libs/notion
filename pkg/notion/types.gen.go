// This file provides types for the API.
//
// Code generated by github.com/MarkRosemaker DO NOT EDIT.

package notion

import (
	"net/url"
	"time"

	"github.com/go-api-libs/types"
	"github.com/google/uuid"
)

type GetBlocksParams struct {
	PageSize int
}

// Style information which applies to the whole rich text object.
type Annotations struct {
	// Whether the text is **bolded**.
	Bold bool `json:"bold,omitzero"`
	// Whether the text is *italicized*.
	Italic bool `json:"italic,omitzero"`
	// Whether the text is struck through.
	Strikethrough bool `json:"strikethrough,omitzero"`
	// Whether the text is underlined.
	Underline bool `json:"underline,omitzero"`
	// Whether the text is code `style`.
	Code bool `json:"code,omitzero"`
	// The color of the block.
	Color Color `json:"color,omitzero"`
}

// Block2 defines a model
type Block2 struct {
	Object           string                  `json:"object,omitzero"`
	ID               uuid.UUID               `json:"id,omitzero"`
	Parent           Block2Parent            `json:"parent"`
	CreatedTime      time.Time               `json:"created_time,omitzero"`
	LastEditedTime   time.Time               `json:"last_edited_time,omitzero"`
	CreatedBy        Block2CreatedBy         `json:"created_by"`
	LastEditedBy     Block2LastEditedBy      `json:"last_edited_by"`
	HasChildren      bool                    `json:"has_children,omitzero"`
	Archived         bool                    `json:"archived,omitzero"`
	InTrash          bool                    `json:"in_trash,omitzero"`
	Type             string                  `json:"type,omitzero"`
	Paragraph        Block2Paragraph         `json:"paragraph"`
	Heading1         *Block2Heading1         `json:"heading_1,omitempty"`
	Heading2         *Block2Heading2         `json:"heading_2,omitempty"`
	Heading3         *Block2Heading3         `json:"heading_3,omitempty"`
	Callout          *Block2Callout          `json:"callout,omitempty"`
	Quote            *Block2Quote            `json:"quote,omitempty"`
	SyncedBlock      *Block2SyncedBlock      `json:"synced_block,omitempty"`
	NumberedListItem *Block2NumberedListItem `json:"numbered_list_item,omitempty"`
	BulletedListItem *Block2BulletedListItem `json:"bulleted_list_item,omitempty"`
	ToDo             *Block2ToDo             `json:"to_do,omitempty"`
	Toggle           *Block2Toggle           `json:"toggle,omitempty"`
	Code             *Block2Code             `json:"code,omitempty"`
	ChildPage        *Block2ChildPage        `json:"child_page,omitempty"`
	ChildDatabase    *Block2ChildDatabase    `json:"child_database,omitempty"`
	Embed            *Block2Embed            `json:"embed,omitempty"`
	PDF              *Block2Pdf              `json:"pdf,omitempty"`
	ColumnList       *struct{}               `json:"column_list,omitempty"`
	Video            *Block2Video            `json:"video,omitempty"`
	File             *Block2File             `json:"file,omitempty"`
	Bookmark         *Block2Bookmark         `json:"bookmark,omitempty"`
	Equation         *Block2Equation         `json:"equation,omitempty"`
	Divider          *struct{}               `json:"divider,omitempty"`
	TableOfContents  *Block2TableOfContents  `json:"table_of_contents,omitempty"`
	Breadcrumb       *struct{}               `json:"breadcrumb,omitempty"`
	LinkPreview      *Block2LinkPreview      `json:"link_preview,omitempty"`
	Unsupported      *struct{}               `json:"unsupported,omitempty"`
	LinkToPage       *Block2LinkToPage       `json:"link_to_page,omitempty"`
	Table            *Block2Table            `json:"table,omitempty"`
	Audio            *Block2Audio            `json:"audio,omitempty"`
}

// Block2Audio defines a model
type Block2Audio struct {
	Caption  []struct{}          `json:"caption,omitempty"`
	Type     string              `json:"type,omitzero"`
	External Block2AudioExternal `json:"external"`
	File     *Block2AudioFile    `json:"file,omitempty"`
}

// Block2AudioExternal defines a model
type Block2AudioExternal struct {
	URL url.URL `json:"url,omitzero"`
}

// Block2AudioFile defines a model
type Block2AudioFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// Block2Bookmark defines a model
type Block2Bookmark struct {
	Caption Block2BookmarkCaption `json:"caption,omitempty"`
	URL     url.URL               `json:"url,omitzero"`
}

// Block2BookmarkCaption defines a model
type Block2BookmarkCaption []Block2BookmarkCaptionItems

// Block2BookmarkCaptionItems defines a model
type Block2BookmarkCaptionItems struct {
	Type        string                                `json:"type,omitzero"`
	Text        Block2BookmarkCaptionItemsText        `json:"text"`
	Annotations Block2BookmarkCaptionItemsAnnotations `json:"annotations"`
	PlainText   string                                `json:"plain_text,omitzero"`
	Href        struct{}                              `json:"href"`
}

// Block2BookmarkCaptionItemsAnnotations defines a model
type Block2BookmarkCaptionItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2BookmarkCaptionItemsText defines a model
type Block2BookmarkCaptionItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2BulletedListItem defines a model
type Block2BulletedListItem struct {
	RichText Block2BulletedListItemRichText `json:"rich_text,omitempty"`
	Color    string                         `json:"color,omitzero"`
}

// Block2BulletedListItemRichText defines a model
type Block2BulletedListItemRichText []Block2BulletedListItemRichTextItems

// Block2BulletedListItemRichTextItems defines a model
type Block2BulletedListItemRichTextItems struct {
	Type        string                                         `json:"type,omitzero"`
	Text        Block2BulletedListItemRichTextItemsText        `json:"text"`
	Annotations Block2BulletedListItemRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                         `json:"plain_text,omitzero"`
	Href        struct{}                                       `json:"href"`
}

// Block2BulletedListItemRichTextItemsAnnotations defines a model
type Block2BulletedListItemRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2BulletedListItemRichTextItemsText defines a model
type Block2BulletedListItemRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2Callout defines a model
type Block2Callout struct {
	RichText Block2CalloutRichText `json:"rich_text,omitempty"`
	Icon     Block2CalloutIcon     `json:"icon"`
	Color    string                `json:"color,omitzero"`
}

// Block2CalloutIcon defines a model
type Block2CalloutIcon struct {
	Type     string                     `json:"type,omitzero"`
	Emoji    string                     `json:"emoji,omitzero"`
	External *Block2CalloutIconExternal `json:"external,omitempty"`
	File     *Block2CalloutIconFile     `json:"file,omitempty"`
}

// Block2CalloutIconExternal defines a model
type Block2CalloutIconExternal struct {
	URL url.URL `json:"url,omitzero"`
}

// Block2CalloutIconFile defines a model
type Block2CalloutIconFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// Block2CalloutRichText defines a model
type Block2CalloutRichText []Block2CalloutRichTextItems

// Block2CalloutRichTextItems defines a model
type Block2CalloutRichTextItems struct {
	Type        string                                `json:"type,omitzero"`
	Text        Block2CalloutRichTextItemsText        `json:"text"`
	Annotations Block2CalloutRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                `json:"plain_text,omitzero"`
	Href        struct{}                              `json:"href"`
}

// Block2CalloutRichTextItemsAnnotations defines a model
type Block2CalloutRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2CalloutRichTextItemsText defines a model
type Block2CalloutRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2ChildDatabase defines a model
type Block2ChildDatabase struct {
	Title string `json:"title,omitzero"`
}

// Block2ChildPage defines a model
type Block2ChildPage struct {
	Title string `json:"title,omitzero"`
}

// Block2Code defines a model
type Block2Code struct {
	Caption  Block2CodeCaption  `json:"caption,omitempty"`
	RichText Block2CodeRichText `json:"rich_text,omitempty"`
	Language string             `json:"language,omitzero"`
}

// Block2CodeCaption defines a model
type Block2CodeCaption []Block2CodeCaptionItems

// Block2CodeCaptionItems defines a model
type Block2CodeCaptionItems struct {
	Type        string                            `json:"type,omitzero"`
	Text        Block2CodeCaptionItemsText        `json:"text"`
	Annotations Block2CodeCaptionItemsAnnotations `json:"annotations"`
	PlainText   string                            `json:"plain_text,omitzero"`
	Href        struct{}                          `json:"href"`
}

// Block2CodeCaptionItemsAnnotations defines a model
type Block2CodeCaptionItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2CodeCaptionItemsText defines a model
type Block2CodeCaptionItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2CodeRichText defines a model
type Block2CodeRichText []Block2CodeRichTextItems

// Block2CodeRichTextItems defines a model
type Block2CodeRichTextItems struct {
	Type        string                             `json:"type,omitzero"`
	Text        Block2CodeRichTextItemsText        `json:"text"`
	Annotations Block2CodeRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                             `json:"plain_text,omitzero"`
	Href        url.URL                            `json:"href,omitzero"`
}

// Block2CodeRichTextItemsAnnotations defines a model
type Block2CodeRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2CodeRichTextItemsText defines a model
type Block2CodeRichTextItemsText struct {
	Content string                          `json:"content,omitzero"`
	Link    Block2CodeRichTextItemsTextLink `json:"link"`
}

// Block2CodeRichTextItemsTextLink defines a model
type Block2CodeRichTextItemsTextLink struct {
	URL *url.URL `json:"url,omitempty"`
}

// Block2CreatedBy defines a model
type Block2CreatedBy struct {
	Object string    `json:"object,omitzero"`
	ID     uuid.UUID `json:"id,omitzero"`
}

// Block2Embed defines a model
type Block2Embed struct {
	Caption Block2EmbedCaption `json:"caption,omitempty"`
	URL     url.URL            `json:"url,omitzero"`
}

// Block2EmbedCaption defines a model
type Block2EmbedCaption []Block2EmbedCaptionItems

// Block2EmbedCaptionItems defines a model
type Block2EmbedCaptionItems struct {
	Type        string                              `json:"type,omitzero"`
	Text        *Block2EmbedCaptionItemsText        `json:"text,omitempty"`
	Annotations *Block2EmbedCaptionItemsAnnotations `json:"annotations,omitempty"`
	PlainText   string                              `json:"plain_text,omitzero"`
	Href        *struct{}                           `json:"href,omitempty"`
}

// Block2EmbedCaptionItemsAnnotations defines a model
type Block2EmbedCaptionItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2EmbedCaptionItemsText defines a model
type Block2EmbedCaptionItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2Equation defines a model
type Block2Equation struct {
	Expression string `json:"expression,omitzero"`
}

// Block2File defines a model
type Block2File struct {
	Caption []struct{}     `json:"caption,omitempty"`
	Type    string         `json:"type,omitzero"`
	File    Block2FileFile `json:"file"`
	Name    string         `json:"name,omitzero"`
}

// Block2FileFile defines a model
type Block2FileFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// Block2Heading1 defines a model
type Block2Heading1 struct {
	RichText     Block2Heading1RichText `json:"rich_text,omitempty"`
	IsToggleable bool                   `json:"is_toggleable,omitzero"`
	Color        string                 `json:"color,omitzero"`
}

// Block2Heading1RichText defines a model
type Block2Heading1RichText []Block2Heading1RichTextItems

// Block2Heading1RichTextItems defines a model
type Block2Heading1RichTextItems struct {
	Type        string                                 `json:"type,omitzero"`
	Text        Block2Heading1RichTextItemsText        `json:"text"`
	Annotations Block2Heading1RichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                 `json:"plain_text,omitzero"`
	Href        struct{}                               `json:"href"`
}

// Block2Heading1RichTextItemsAnnotations defines a model
type Block2Heading1RichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2Heading1RichTextItemsText defines a model
type Block2Heading1RichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2Heading2 defines a model
type Block2Heading2 struct {
	RichText     Block2Heading2RichText `json:"rich_text,omitempty"`
	IsToggleable bool                   `json:"is_toggleable,omitzero"`
	Color        string                 `json:"color,omitzero"`
}

// Block2Heading2RichText defines a model
type Block2Heading2RichText []Block2Heading2RichTextItems

// Block2Heading2RichTextItems defines a model
type Block2Heading2RichTextItems struct {
	Type        string                                 `json:"type,omitzero"`
	Text        Block2Heading2RichTextItemsText        `json:"text"`
	Annotations Block2Heading2RichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                 `json:"plain_text,omitzero"`
	Href        struct{}                               `json:"href"`
}

// Block2Heading2RichTextItemsAnnotations defines a model
type Block2Heading2RichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2Heading2RichTextItemsText defines a model
type Block2Heading2RichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2Heading3 defines a model
type Block2Heading3 struct {
	RichText     Block2Heading3RichText `json:"rich_text,omitempty"`
	IsToggleable bool                   `json:"is_toggleable,omitzero"`
	Color        string                 `json:"color,omitzero"`
}

// Block2Heading3RichText defines a model
type Block2Heading3RichText []Block2Heading3RichTextItems

// Block2Heading3RichTextItems defines a model
type Block2Heading3RichTextItems struct {
	Type        string                                 `json:"type,omitzero"`
	Text        Block2Heading3RichTextItemsText        `json:"text"`
	Annotations Block2Heading3RichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                 `json:"plain_text,omitzero"`
	Href        struct{}                               `json:"href"`
}

// Block2Heading3RichTextItemsAnnotations defines a model
type Block2Heading3RichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2Heading3RichTextItemsText defines a model
type Block2Heading3RichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2LastEditedBy defines a model
type Block2LastEditedBy struct {
	Object string    `json:"object,omitzero"`
	ID     uuid.UUID `json:"id,omitzero"`
}

// Block2LinkPreview defines a model
type Block2LinkPreview struct {
	URL url.URL `json:"url,omitzero"`
}

// Block2LinkToPage defines a model
type Block2LinkToPage struct {
	Type   string    `json:"type,omitzero"`
	PageID uuid.UUID `json:"page_id,omitzero"`
}

// Block2NumberedListItem defines a model
type Block2NumberedListItem struct {
	RichText Block2NumberedListItemRichText `json:"rich_text,omitempty"`
	Color    string                         `json:"color,omitzero"`
}

// Block2NumberedListItemRichText defines a model
type Block2NumberedListItemRichText []Block2NumberedListItemRichTextItems

// Block2NumberedListItemRichTextItems defines a model
type Block2NumberedListItemRichTextItems struct {
	Type        string                                         `json:"type,omitzero"`
	Text        Block2NumberedListItemRichTextItemsText        `json:"text"`
	Annotations Block2NumberedListItemRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                         `json:"plain_text,omitzero"`
	Href        struct{}                                       `json:"href"`
}

// Block2NumberedListItemRichTextItemsAnnotations defines a model
type Block2NumberedListItemRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2NumberedListItemRichTextItemsText defines a model
type Block2NumberedListItemRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2Paragraph defines a model
type Block2Paragraph struct {
	RichText Block2ParagraphRichText `json:"rich_text,omitempty"`
	Color    string                  `json:"color,omitzero"`
}

// Block2ParagraphRichText defines a model
type Block2ParagraphRichText []Block2ParagraphRichTextItems

// Block2ParagraphRichTextItems defines a model
type Block2ParagraphRichTextItems struct {
	Type        string                                   `json:"type,omitzero"`
	Text        *Block2ParagraphRichTextItemsText        `json:"text,omitempty"`
	Annotations *Block2ParagraphRichTextItemsAnnotations `json:"annotations,omitempty"`
	PlainText   string                                   `json:"plain_text,omitzero"`
	Href        *url.URL                                 `json:"href,omitempty"`
	Mention     *Block2ParagraphRichTextItemsMention     `json:"mention,omitempty"`
	Equation    *Block2ParagraphRichTextItemsEquation    `json:"equation,omitempty"`
}

// Block2ParagraphRichTextItemsAnnotations defines a model
type Block2ParagraphRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2ParagraphRichTextItemsEquation defines a model
type Block2ParagraphRichTextItemsEquation struct {
	Expression string `json:"expression,omitzero"`
}

// Block2ParagraphRichTextItemsMention defines a model
type Block2ParagraphRichTextItemsMention struct {
	Type        string                                         `json:"type,omitzero"`
	LinkMention Block2ParagraphRichTextItemsMentionLinkMention `json:"link_mention"`
	Database    *Block2ParagraphRichTextItemsMentionDatabase   `json:"database,omitempty"`
	User        *Block2ParagraphRichTextItemsMentionUser       `json:"user,omitempty"`
	Date        *Block2ParagraphRichTextItemsMentionDate       `json:"date,omitempty"`
	Page        *Block2ParagraphRichTextItemsMentionPage       `json:"page,omitempty"`
}

// Block2ParagraphRichTextItemsMentionDatabase defines a model
type Block2ParagraphRichTextItemsMentionDatabase struct {
	ID uuid.UUID `json:"id,omitzero"`
}

// Block2ParagraphRichTextItemsMentionDate defines a model
type Block2ParagraphRichTextItemsMentionDate struct {
	Start    string   `json:"start,omitzero"`
	End      struct{} `json:"end"`
	TimeZone struct{} `json:"time_zone"`
}

// Block2ParagraphRichTextItemsMentionLinkMention defines a model
type Block2ParagraphRichTextItemsMentionLinkMention struct {
	Href        url.URL `json:"href,omitzero"`
	Title       string  `json:"title,omitzero"`
	Description string  `json:"description,omitzero"`
}

// Block2ParagraphRichTextItemsMentionPage defines a model
type Block2ParagraphRichTextItemsMentionPage struct {
	ID uuid.UUID `json:"id,omitzero"`
}

// Block2ParagraphRichTextItemsMentionUser defines a model
type Block2ParagraphRichTextItemsMentionUser struct {
	Object    string                                        `json:"object,omitzero"`
	ID        uuid.UUID                                     `json:"id,omitzero"`
	Name      string                                        `json:"name,omitzero"`
	AvatarURL url.URL                                       `json:"avatar_url,omitzero"`
	Type      string                                        `json:"type,omitzero"`
	Person    Block2ParagraphRichTextItemsMentionUserPerson `json:"person"`
}

// Block2ParagraphRichTextItemsMentionUserPerson defines a model
type Block2ParagraphRichTextItemsMentionUserPerson struct {
	Email types.Email `json:"email,omitzero"`
}

// Block2ParagraphRichTextItemsText defines a model
type Block2ParagraphRichTextItemsText struct {
	Content string                               `json:"content,omitzero"`
	Link    Block2ParagraphRichTextItemsTextLink `json:"link"`
}

// Block2ParagraphRichTextItemsTextLink defines a model
type Block2ParagraphRichTextItemsTextLink struct {
	URL *url.URL `json:"url,omitempty"`
}

// Block2Parent defines a model
type Block2Parent struct {
	Type   string    `json:"type,omitzero"`
	PageID uuid.UUID `json:"page_id,omitzero"`
}

// Block2Pdf defines a model
type Block2Pdf struct {
	Caption  Block2PdfCaption  `json:"caption,omitempty"`
	Type     string            `json:"type,omitzero"`
	External Block2PdfExternal `json:"external"`
	File     *Block2PdfFile    `json:"file,omitempty"`
}

// Block2PdfCaption defines a model
type Block2PdfCaption []Block2PdfCaptionItems

// Block2PdfCaptionItems defines a model
type Block2PdfCaptionItems struct {
	Type        string                           `json:"type,omitzero"`
	Text        Block2PdfCaptionItemsText        `json:"text"`
	Annotations Block2PdfCaptionItemsAnnotations `json:"annotations"`
	PlainText   string                           `json:"plain_text,omitzero"`
	Href        struct{}                         `json:"href"`
}

// Block2PdfCaptionItemsAnnotations defines a model
type Block2PdfCaptionItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2PdfCaptionItemsText defines a model
type Block2PdfCaptionItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2PdfExternal defines a model
type Block2PdfExternal struct {
	URL url.URL `json:"url,omitzero"`
}

// Block2PdfFile defines a model
type Block2PdfFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// Block2Quote defines a model
type Block2Quote struct {
	RichText Block2QuoteRichText `json:"rich_text,omitempty"`
	Color    string              `json:"color,omitzero"`
}

// Block2QuoteRichText defines a model
type Block2QuoteRichText []Block2QuoteRichTextItems

// Block2QuoteRichTextItems defines a model
type Block2QuoteRichTextItems struct {
	Type        string                              `json:"type,omitzero"`
	Text        Block2QuoteRichTextItemsText        `json:"text"`
	Annotations Block2QuoteRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                              `json:"plain_text,omitzero"`
	Href        struct{}                            `json:"href"`
}

// Block2QuoteRichTextItemsAnnotations defines a model
type Block2QuoteRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2QuoteRichTextItemsText defines a model
type Block2QuoteRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2SyncedBlock defines a model
type Block2SyncedBlock struct {
	SyncedFrom Block2SyncedBlockSyncedFrom `json:"synced_from"`
}

// Block2SyncedBlockSyncedFrom defines a model
type Block2SyncedBlockSyncedFrom struct {
	Type    string    `json:"type,omitzero"`
	BlockID uuid.UUID `json:"block_id,omitzero"`
}

// Block2Table defines a model
type Block2Table struct {
	TableWidth      int  `json:"table_width,omitzero"`
	HasColumnHeader bool `json:"has_column_header,omitzero"`
	HasRowHeader    bool `json:"has_row_header,omitzero"`
}

// Block2TableOfContents defines a model
type Block2TableOfContents struct {
	Color string `json:"color,omitzero"`
}

// Block2ToDo defines a model
type Block2ToDo struct {
	RichText Block2ToDoRichText `json:"rich_text,omitempty"`
	Checked  bool               `json:"checked,omitzero"`
	Color    string             `json:"color,omitzero"`
}

// Block2ToDoRichText defines a model
type Block2ToDoRichText []Block2ToDoRichTextItems

// Block2ToDoRichTextItems defines a model
type Block2ToDoRichTextItems struct {
	Type        string                             `json:"type,omitzero"`
	Text        Block2ToDoRichTextItemsText        `json:"text"`
	Annotations Block2ToDoRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                             `json:"plain_text,omitzero"`
	Href        struct{}                           `json:"href"`
}

// Block2ToDoRichTextItemsAnnotations defines a model
type Block2ToDoRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2ToDoRichTextItemsText defines a model
type Block2ToDoRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2Toggle defines a model
type Block2Toggle struct {
	RichText Block2ToggleRichText `json:"rich_text,omitempty"`
	Color    string               `json:"color,omitzero"`
}

// Block2ToggleRichText defines a model
type Block2ToggleRichText []Block2ToggleRichTextItems

// Block2ToggleRichTextItems defines a model
type Block2ToggleRichTextItems struct {
	Type        string                               `json:"type,omitzero"`
	Text        Block2ToggleRichTextItemsText        `json:"text"`
	Annotations Block2ToggleRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                               `json:"plain_text,omitzero"`
	Href        struct{}                             `json:"href"`
}

// Block2ToggleRichTextItemsAnnotations defines a model
type Block2ToggleRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// Block2ToggleRichTextItemsText defines a model
type Block2ToggleRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// Block2Video defines a model
type Block2Video struct {
	Caption  []struct{}           `json:"caption,omitempty"`
	Type     string               `json:"type,omitzero"`
	File     Block2VideoFile      `json:"file"`
	External *Block2VideoExternal `json:"external,omitempty"`
}

// Block2VideoExternal defines a model
type Block2VideoExternal struct {
	URL url.URL `json:"url,omitzero"`
}

// Block2VideoFile defines a model
type Block2VideoFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// Blocks defines a model
type Blocks []Block2

// BlocksList defines a model
type BlocksList struct {
	Object     string    `json:"object,omitzero"`
	Results    Blocks    `json:"results,omitempty"`
	NextCursor struct{}  `json:"next_cursor"`
	HasMore    bool      `json:"has_more,omitzero"`
	Type       string    `json:"type,omitzero"`
	Block      struct{}  `json:"block"`
	RequestID  uuid.UUID `json:"request_id,omitzero"`
}

// The color of the block.
type Color string

const (
	ColorDefault          Color = "default"
	ColorGray             Color = "gray"
	ColorBrown            Color = "brown"
	ColorOrange           Color = "orange"
	ColorYellow           Color = "yellow"
	ColorGreen            Color = "green"
	ColorBlue             Color = "blue"
	ColorPurple           Color = "purple"
	ColorPink             Color = "pink"
	ColorRed              Color = "red"
	ColorGrayBackground   Color = "gray_background"
	ColorBrownBackground  Color = "brown_background"
	ColorOrangeBackground Color = "orange_background"
	ColorYellowBackground Color = "yellow_background"
	ColorGreenBackground  Color = "green_background"
	ColorBlueBackground   Color = "blue_background"
	ColorPurpleBackground Color = "purple_background"
	ColorPinkBackground   Color = "pink_background"
	ColorRedBackground    Color = "red_background"
)

// An external file is any URL that isn't hosted by Notion.
type ExternalFile struct {
	// Link to the externally hosted content.
	URL url.URL `json:"url,omitzero"`
}

// File objects contain data about files uploaded to Notion as well as external files linked in Notion.
type File struct {
	// Type of this file object.
	Type FileType `json:"type,omitzero"`
	// An external file is any URL that isn't hosted by Notion.
	External *ExternalFile `json:"external,omitempty"`
}

// Type of this file object.
type FileType string

const (
	FileTypeFile     FileType = "file"
	FileTypeExternal FileType = "external"
)

// Page or database icon. It is either an emoji or a file.
type Icon struct {
	// Type of icon.
	Type IconType `json:"type,omitzero"`
	// Emoji character.
	Emoji string `json:"emoji,omitzero"`
}

// Type of icon.
type IconType string

const (
	IconTypeEmoji    IconType = "emoji"
	IconTypeFile     IconType = "file"
	IconTypeExternal IconType = "external"
)

// An inline link in a text.
type Link struct{}

// The Page object contains the [property values](https://developers.notion.com/reference/property-value-object) of a single Notion page.
//
// All pages have a parent. If the parent is a [database](https://developers.notion.com/reference/database), the property values conform to the schema laid out database's [properties](https://developers.notion.com/reference/property-object). Otherwise, the only property value is the `title`.
//
// Page content is available as [blocks](https://developers.notion.com/reference/block). The content can be read using [retrieve block children](https://developers.notion.com/reference/get-block-children) and appended using [append block children](https://developers.notion.com/reference/patch-block-children).
type Page struct {
	// Always "page".
	Object string    `json:"object,omitzero"`
	ID     uuid.UUID `json:"id,omitzero"`
	// Date and time when this page was created. Formatted as an ISO 8601 date time string.
	CreatedTime time.Time `json:"created_time,omitzero"`
	// Date and time when this page was updated. Formatted as an ISO 8601 date time string.
	LastEditedTime time.Time     `json:"last_edited_time,omitzero"`
	CreatedBy      UserReference `json:"created_by"`
	LastEditedBy   UserReference `json:"last_edited_by"`
	// File objects contain data about files uploaded to Notion as well as external files linked in Notion.
	Cover File `json:"cover"`
	// Page or database icon. It is either an emoji or a file.
	Icon Icon `json:"icon"`
	// The `parent` property of a page or database contains these keys. Mandatory when creating, must be missing when updating.
	Parent Parent `json:"parent"`
	// The archived status of the page.
	Archived bool `json:"archived,omitzero"`
	InTrash  bool `json:"in_trash,omitzero"`
	// Properties of a page or database.
	Properties PropertyValues `json:"properties"`
	// The URL of the Notion page.
	URL       url.URL   `json:"url,omitzero"`
	PublicURL url.URL   `json:"public_url,omitzero"`
	RequestID uuid.UUID `json:"request_id,omitzero"`
}

// The `parent` property of a page or database contains these keys. Mandatory when creating, must be missing when updating.
type Parent struct {
	// The type of the parent.
	Type   ParentType `json:"type,omitzero"`
	PageID *uuid.UUID `json:"page_id,omitempty"`
}

// The type of the parent.
type ParentType string

const (
	ParentTypePageID     ParentType = "page_id"
	ParentTypeWorkspace  ParentType = "workspace"
	ParentTypeBlockID    ParentType = "block_id"
	ParentTypeDatabaseID ParentType = "database_id"
)

// Type of the property.
type PropertyType string

const (
	PropertyTypeRichText       PropertyType = "rich_text"
	PropertyTypeNumber         PropertyType = "number"
	PropertyTypeSelect         PropertyType = "select"
	PropertyTypeStatus         PropertyType = "status"
	PropertyTypeMultiSelect    PropertyType = "multi_select"
	PropertyTypeDate           PropertyType = "date"
	PropertyTypeFormula        PropertyType = "formula"
	PropertyTypeRelation       PropertyType = "relation"
	PropertyTypeRollup         PropertyType = "rollup"
	PropertyTypeTitle          PropertyType = "title"
	PropertyTypePeople         PropertyType = "people"
	PropertyTypeFiles          PropertyType = "files"
	PropertyTypeCheckbox       PropertyType = "checkbox"
	PropertyTypeURL            PropertyType = "url"
	PropertyTypeEmail          PropertyType = "email"
	PropertyTypePhoneNumber    PropertyType = "phone_number"
	PropertyTypeCreatedTime    PropertyType = "created_time"
	PropertyTypeCreatedBy      PropertyType = "created_by"
	PropertyTypeLastEditedTime PropertyType = "last_edited_time"
	PropertyTypeLastEditedBy   PropertyType = "last_edited_by"
	PropertyTypeButton         PropertyType = "button"
)

// A property value defines the identifier, type, and value of a page property in a page object. It's used when retrieving and updating pages ex: Create and Update pages.
type PropertyValue struct {
	/*
	   Underlying identifier for the property. This identifier is guaranteed to remain constant when the property name changes. It may be a UUID, but is often a short random string.

	   The id may be used in place of name when creating or updating pages.
	*/
	ID string `json:"id,omitzero"`
	// Type of the property.
	Type  PropertyType `json:"type,omitzero"`
	Title RichTexts    `json:"title,omitempty"`
}

// Properties of a page or database.
type PropertyValues map[string]PropertyValue

// Rich text objects contain data for displaying formatted text, mentions, and equations. A rich text object also contains annotations for style information. Arrays of rich text objects are used [within property objects](https://developers.notion.com/reference/database-property) and [property value objects](https://developers.notion.com/reference/page-property-value) to create what a user sees as a single text value in Notion.
type RichText struct {
	// Type of this rich text object.
	Type RichTextType `json:"type,omitzero"`
	// Text objects contain this information within the `text` property of a RichText object.
	Text Text `json:"text"`
	// Style information which applies to the whole rich text object.
	Annotations Annotations `json:"annotations"`
	// The plain text without annotations.
	PlainText string `json:"plain_text,omitzero"`
	// The URL of any link or internal Notion mention in this text, if any.
	Href *url.URL `json:"href,omitempty"`
}

// Type of this rich text object.
type RichTextType string

const (
	RichTextTypeText     RichTextType = "text"
	RichTextTypeMention  RichTextType = "mention"
	RichTextTypeEquation RichTextType = "equation"
)

// RichTexts defines a model
type RichTexts []RichText

// Text objects contain this information within the `text` property of a RichText object.
type Text struct {
	// Text content. This field contains the actual content of your text and is probably the field you'll use most often.
	Content string `json:"content,omitzero"`
	// An inline link in a text.
	Link *Link `json:"link,omitempty"`
}

// UserReference defines a model
type UserReference struct {
	// Always "user"
	Object string    `json:"object,omitzero"`
	ID     uuid.UUID `json:"id,omitzero"`
}
