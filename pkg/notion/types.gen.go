// This file provides types for the API.
//
// Code generated by github.com/MarkRosemaker DO NOT EDIT.

package notion

import (
	"net/url"
	"time"

	"github.com/go-api-libs/types"
	"github.com/google/uuid"
)

type GetBlocksParams struct {
	PageSize int
}

// Style information which applies to the whole rich text object.
type Annotations struct {
	// Whether the text is **bolded**.
	Bold bool `json:"bold,omitzero"`
	// Whether the text is *italicized*.
	Italic bool `json:"italic,omitzero"`
	// Whether the text is struck through.
	Strikethrough bool `json:"strikethrough,omitzero"`
	// Whether the text is underlined.
	Underline bool `json:"underline,omitzero"`
	// Whether the text is code `style`.
	Code bool `json:"code,omitzero"`
	// The color of the block.
	Color Color `json:"color,omitzero"`
}

// BlocksList defines a model
type BlocksList struct {
	Object     string            `json:"object,omitzero"`
	Results    BlocksListResults `json:"results,omitempty"`
	NextCursor struct{}          `json:"next_cursor"`
	HasMore    bool              `json:"has_more,omitzero"`
	Type       string            `json:"type,omitzero"`
	Block      struct{}          `json:"block"`
	RequestID  uuid.UUID         `json:"request_id,omitzero"`
}

// BlocksListResults defines a model
type BlocksListResults []BlocksListResultsItems

// BlocksListResultsItems defines a model
type BlocksListResultsItems struct {
	Object           string                                  `json:"object,omitzero"`
	ID               uuid.UUID                               `json:"id,omitzero"`
	Parent           BlocksListResultsItemsParent            `json:"parent"`
	CreatedTime      time.Time                               `json:"created_time,omitzero"`
	LastEditedTime   time.Time                               `json:"last_edited_time,omitzero"`
	CreatedBy        BlocksListResultsItemsCreatedBy         `json:"created_by"`
	LastEditedBy     BlocksListResultsItemsLastEditedBy      `json:"last_edited_by"`
	HasChildren      bool                                    `json:"has_children,omitzero"`
	Archived         bool                                    `json:"archived,omitzero"`
	InTrash          bool                                    `json:"in_trash,omitzero"`
	Type             string                                  `json:"type,omitzero"`
	Paragraph        BlocksListResultsItemsParagraph         `json:"paragraph"`
	Heading1         *BlocksListResultsItemsHeading1         `json:"heading_1,omitempty"`
	Heading2         *BlocksListResultsItemsHeading2         `json:"heading_2,omitempty"`
	Heading3         *BlocksListResultsItemsHeading3         `json:"heading_3,omitempty"`
	Callout          *BlocksListResultsItemsCallout          `json:"callout,omitempty"`
	Quote            *BlocksListResultsItemsQuote            `json:"quote,omitempty"`
	SyncedBlock      *BlocksListResultsItemsSyncedBlock      `json:"synced_block,omitempty"`
	NumberedListItem *BlocksListResultsItemsNumberedListItem `json:"numbered_list_item,omitempty"`
	BulletedListItem *BlocksListResultsItemsBulletedListItem `json:"bulleted_list_item,omitempty"`
	ToDo             *BlocksListResultsItemsToDo             `json:"to_do,omitempty"`
	Toggle           *BlocksListResultsItemsToggle           `json:"toggle,omitempty"`
	Code             *BlocksListResultsItemsCode             `json:"code,omitempty"`
	ChildPage        *BlocksListResultsItemsChildPage        `json:"child_page,omitempty"`
	ChildDatabase    *BlocksListResultsItemsChildDatabase    `json:"child_database,omitempty"`
	Embed            *BlocksListResultsItemsEmbed            `json:"embed,omitempty"`
	PDF              *BlocksListResultsItemsPdf              `json:"pdf,omitempty"`
	ColumnList       *struct{}                               `json:"column_list,omitempty"`
	Video            *BlocksListResultsItemsVideo            `json:"video,omitempty"`
	File             *BlocksListResultsItemsFile             `json:"file,omitempty"`
	Bookmark         *BlocksListResultsItemsBookmark         `json:"bookmark,omitempty"`
	Equation         *BlocksListResultsItemsEquation         `json:"equation,omitempty"`
	Divider          *struct{}                               `json:"divider,omitempty"`
	TableOfContents  *BlocksListResultsItemsTableOfContents  `json:"table_of_contents,omitempty"`
	Breadcrumb       *struct{}                               `json:"breadcrumb,omitempty"`
	LinkPreview      *BlocksListResultsItemsLinkPreview      `json:"link_preview,omitempty"`
	Unsupported      *struct{}                               `json:"unsupported,omitempty"`
	LinkToPage       *BlocksListResultsItemsLinkToPage       `json:"link_to_page,omitempty"`
	Table            *BlocksListResultsItemsTable            `json:"table,omitempty"`
	Audio            *BlocksListResultsItemsAudio            `json:"audio,omitempty"`
}

// BlocksListResultsItemsAudio defines a model
type BlocksListResultsItemsAudio struct {
	Caption  []struct{}                          `json:"caption,omitempty"`
	Type     string                              `json:"type,omitzero"`
	External BlocksListResultsItemsAudioExternal `json:"external"`
	File     *BlocksListResultsItemsAudioFile    `json:"file,omitempty"`
}

// BlocksListResultsItemsAudioExternal defines a model
type BlocksListResultsItemsAudioExternal struct {
	URL url.URL `json:"url,omitzero"`
}

// BlocksListResultsItemsAudioFile defines a model
type BlocksListResultsItemsAudioFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// BlocksListResultsItemsBookmark defines a model
type BlocksListResultsItemsBookmark struct {
	Caption BlocksListResultsItemsBookmarkCaption `json:"caption,omitempty"`
	URL     url.URL                               `json:"url,omitzero"`
}

// BlocksListResultsItemsBookmarkCaption defines a model
type BlocksListResultsItemsBookmarkCaption []BlocksListResultsItemsBookmarkCaptionItems

// BlocksListResultsItemsBookmarkCaptionItems defines a model
type BlocksListResultsItemsBookmarkCaptionItems struct {
	Type        string                                                `json:"type,omitzero"`
	Text        BlocksListResultsItemsBookmarkCaptionItemsText        `json:"text"`
	Annotations BlocksListResultsItemsBookmarkCaptionItemsAnnotations `json:"annotations"`
	PlainText   string                                                `json:"plain_text,omitzero"`
	Href        struct{}                                              `json:"href"`
}

// BlocksListResultsItemsBookmarkCaptionItemsAnnotations defines a model
type BlocksListResultsItemsBookmarkCaptionItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsBookmarkCaptionItemsText defines a model
type BlocksListResultsItemsBookmarkCaptionItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsBulletedListItem defines a model
type BlocksListResultsItemsBulletedListItem struct {
	RichText BlocksListResultsItemsBulletedListItemRichText `json:"rich_text,omitempty"`
	Color    string                                         `json:"color,omitzero"`
}

// BlocksListResultsItemsBulletedListItemRichText defines a model
type BlocksListResultsItemsBulletedListItemRichText []BlocksListResultsItemsBulletedListItemRichTextItems

// BlocksListResultsItemsBulletedListItemRichTextItems defines a model
type BlocksListResultsItemsBulletedListItemRichTextItems struct {
	Type        string                                                         `json:"type,omitzero"`
	Text        BlocksListResultsItemsBulletedListItemRichTextItemsText        `json:"text"`
	Annotations BlocksListResultsItemsBulletedListItemRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                                         `json:"plain_text,omitzero"`
	Href        struct{}                                                       `json:"href"`
}

// BlocksListResultsItemsBulletedListItemRichTextItemsAnnotations defines a model
type BlocksListResultsItemsBulletedListItemRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsBulletedListItemRichTextItemsText defines a model
type BlocksListResultsItemsBulletedListItemRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsCallout defines a model
type BlocksListResultsItemsCallout struct {
	RichText BlocksListResultsItemsCalloutRichText `json:"rich_text,omitempty"`
	Icon     BlocksListResultsItemsCalloutIcon     `json:"icon"`
	Color    string                                `json:"color,omitzero"`
}

// BlocksListResultsItemsCalloutIcon defines a model
type BlocksListResultsItemsCalloutIcon struct {
	Type     string                                     `json:"type,omitzero"`
	Emoji    string                                     `json:"emoji,omitzero"`
	External *BlocksListResultsItemsCalloutIconExternal `json:"external,omitempty"`
	File     *BlocksListResultsItemsCalloutIconFile     `json:"file,omitempty"`
}

// BlocksListResultsItemsCalloutIconExternal defines a model
type BlocksListResultsItemsCalloutIconExternal struct {
	URL url.URL `json:"url,omitzero"`
}

// BlocksListResultsItemsCalloutIconFile defines a model
type BlocksListResultsItemsCalloutIconFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// BlocksListResultsItemsCalloutRichText defines a model
type BlocksListResultsItemsCalloutRichText []BlocksListResultsItemsCalloutRichTextItems

// BlocksListResultsItemsCalloutRichTextItems defines a model
type BlocksListResultsItemsCalloutRichTextItems struct {
	Type        string                                                `json:"type,omitzero"`
	Text        BlocksListResultsItemsCalloutRichTextItemsText        `json:"text"`
	Annotations BlocksListResultsItemsCalloutRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                                `json:"plain_text,omitzero"`
	Href        struct{}                                              `json:"href"`
}

// BlocksListResultsItemsCalloutRichTextItemsAnnotations defines a model
type BlocksListResultsItemsCalloutRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsCalloutRichTextItemsText defines a model
type BlocksListResultsItemsCalloutRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsChildDatabase defines a model
type BlocksListResultsItemsChildDatabase struct {
	Title string `json:"title,omitzero"`
}

// BlocksListResultsItemsChildPage defines a model
type BlocksListResultsItemsChildPage struct {
	Title string `json:"title,omitzero"`
}

// BlocksListResultsItemsCode defines a model
type BlocksListResultsItemsCode struct {
	Caption  BlocksListResultsItemsCodeCaption  `json:"caption,omitempty"`
	RichText BlocksListResultsItemsCodeRichText `json:"rich_text,omitempty"`
	Language string                             `json:"language,omitzero"`
}

// BlocksListResultsItemsCodeCaption defines a model
type BlocksListResultsItemsCodeCaption []BlocksListResultsItemsCodeCaptionItems

// BlocksListResultsItemsCodeCaptionItems defines a model
type BlocksListResultsItemsCodeCaptionItems struct {
	Type        string                                            `json:"type,omitzero"`
	Text        BlocksListResultsItemsCodeCaptionItemsText        `json:"text"`
	Annotations BlocksListResultsItemsCodeCaptionItemsAnnotations `json:"annotations"`
	PlainText   string                                            `json:"plain_text,omitzero"`
	Href        struct{}                                          `json:"href"`
}

// BlocksListResultsItemsCodeCaptionItemsAnnotations defines a model
type BlocksListResultsItemsCodeCaptionItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsCodeCaptionItemsText defines a model
type BlocksListResultsItemsCodeCaptionItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsCodeRichText defines a model
type BlocksListResultsItemsCodeRichText []BlocksListResultsItemsCodeRichTextItems

// BlocksListResultsItemsCodeRichTextItems defines a model
type BlocksListResultsItemsCodeRichTextItems struct {
	Type        string                                             `json:"type,omitzero"`
	Text        BlocksListResultsItemsCodeRichTextItemsText        `json:"text"`
	Annotations BlocksListResultsItemsCodeRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                             `json:"plain_text,omitzero"`
	Href        url.URL                                            `json:"href,omitzero"`
}

// BlocksListResultsItemsCodeRichTextItemsAnnotations defines a model
type BlocksListResultsItemsCodeRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsCodeRichTextItemsText defines a model
type BlocksListResultsItemsCodeRichTextItemsText struct {
	Content string                                          `json:"content,omitzero"`
	Link    BlocksListResultsItemsCodeRichTextItemsTextLink `json:"link"`
}

// BlocksListResultsItemsCodeRichTextItemsTextLink defines a model
type BlocksListResultsItemsCodeRichTextItemsTextLink struct {
	URL *url.URL `json:"url,omitempty"`
}

// BlocksListResultsItemsCreatedBy defines a model
type BlocksListResultsItemsCreatedBy struct {
	Object string    `json:"object,omitzero"`
	ID     uuid.UUID `json:"id,omitzero"`
}

// BlocksListResultsItemsEmbed defines a model
type BlocksListResultsItemsEmbed struct {
	Caption BlocksListResultsItemsEmbedCaption `json:"caption,omitempty"`
	URL     url.URL                            `json:"url,omitzero"`
}

// BlocksListResultsItemsEmbedCaption defines a model
type BlocksListResultsItemsEmbedCaption []BlocksListResultsItemsEmbedCaptionItems

// BlocksListResultsItemsEmbedCaptionItems defines a model
type BlocksListResultsItemsEmbedCaptionItems struct {
	Type        string                                              `json:"type,omitzero"`
	Text        *BlocksListResultsItemsEmbedCaptionItemsText        `json:"text,omitempty"`
	Annotations *BlocksListResultsItemsEmbedCaptionItemsAnnotations `json:"annotations,omitempty"`
	PlainText   string                                              `json:"plain_text,omitzero"`
	Href        *struct{}                                           `json:"href,omitempty"`
}

// BlocksListResultsItemsEmbedCaptionItemsAnnotations defines a model
type BlocksListResultsItemsEmbedCaptionItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsEmbedCaptionItemsText defines a model
type BlocksListResultsItemsEmbedCaptionItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsEquation defines a model
type BlocksListResultsItemsEquation struct {
	Expression string `json:"expression,omitzero"`
}

// BlocksListResultsItemsFile defines a model
type BlocksListResultsItemsFile struct {
	Caption []struct{}                     `json:"caption,omitempty"`
	Type    string                         `json:"type,omitzero"`
	File    BlocksListResultsItemsFileFile `json:"file"`
	Name    string                         `json:"name,omitzero"`
}

// BlocksListResultsItemsFileFile defines a model
type BlocksListResultsItemsFileFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// BlocksListResultsItemsHeading1 defines a model
type BlocksListResultsItemsHeading1 struct {
	RichText     BlocksListResultsItemsHeading1RichText `json:"rich_text,omitempty"`
	IsToggleable bool                                   `json:"is_toggleable,omitzero"`
	Color        string                                 `json:"color,omitzero"`
}

// BlocksListResultsItemsHeading1RichText defines a model
type BlocksListResultsItemsHeading1RichText []BlocksListResultsItemsHeading1RichTextItems

// BlocksListResultsItemsHeading1RichTextItems defines a model
type BlocksListResultsItemsHeading1RichTextItems struct {
	Type        string                                                 `json:"type,omitzero"`
	Text        BlocksListResultsItemsHeading1RichTextItemsText        `json:"text"`
	Annotations BlocksListResultsItemsHeading1RichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                                 `json:"plain_text,omitzero"`
	Href        struct{}                                               `json:"href"`
}

// BlocksListResultsItemsHeading1RichTextItemsAnnotations defines a model
type BlocksListResultsItemsHeading1RichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsHeading1RichTextItemsText defines a model
type BlocksListResultsItemsHeading1RichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsHeading2 defines a model
type BlocksListResultsItemsHeading2 struct {
	RichText     BlocksListResultsItemsHeading2RichText `json:"rich_text,omitempty"`
	IsToggleable bool                                   `json:"is_toggleable,omitzero"`
	Color        string                                 `json:"color,omitzero"`
}

// BlocksListResultsItemsHeading2RichText defines a model
type BlocksListResultsItemsHeading2RichText []BlocksListResultsItemsHeading2RichTextItems

// BlocksListResultsItemsHeading2RichTextItems defines a model
type BlocksListResultsItemsHeading2RichTextItems struct {
	Type        string                                                 `json:"type,omitzero"`
	Text        BlocksListResultsItemsHeading2RichTextItemsText        `json:"text"`
	Annotations BlocksListResultsItemsHeading2RichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                                 `json:"plain_text,omitzero"`
	Href        struct{}                                               `json:"href"`
}

// BlocksListResultsItemsHeading2RichTextItemsAnnotations defines a model
type BlocksListResultsItemsHeading2RichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsHeading2RichTextItemsText defines a model
type BlocksListResultsItemsHeading2RichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsHeading3 defines a model
type BlocksListResultsItemsHeading3 struct {
	RichText     BlocksListResultsItemsHeading3RichText `json:"rich_text,omitempty"`
	IsToggleable bool                                   `json:"is_toggleable,omitzero"`
	Color        string                                 `json:"color,omitzero"`
}

// BlocksListResultsItemsHeading3RichText defines a model
type BlocksListResultsItemsHeading3RichText []BlocksListResultsItemsHeading3RichTextItems

// BlocksListResultsItemsHeading3RichTextItems defines a model
type BlocksListResultsItemsHeading3RichTextItems struct {
	Type        string                                                 `json:"type,omitzero"`
	Text        BlocksListResultsItemsHeading3RichTextItemsText        `json:"text"`
	Annotations BlocksListResultsItemsHeading3RichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                                 `json:"plain_text,omitzero"`
	Href        struct{}                                               `json:"href"`
}

// BlocksListResultsItemsHeading3RichTextItemsAnnotations defines a model
type BlocksListResultsItemsHeading3RichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsHeading3RichTextItemsText defines a model
type BlocksListResultsItemsHeading3RichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsLastEditedBy defines a model
type BlocksListResultsItemsLastEditedBy struct {
	Object string    `json:"object,omitzero"`
	ID     uuid.UUID `json:"id,omitzero"`
}

// BlocksListResultsItemsLinkPreview defines a model
type BlocksListResultsItemsLinkPreview struct {
	URL url.URL `json:"url,omitzero"`
}

// BlocksListResultsItemsLinkToPage defines a model
type BlocksListResultsItemsLinkToPage struct {
	Type   string    `json:"type,omitzero"`
	PageID uuid.UUID `json:"page_id,omitzero"`
}

// BlocksListResultsItemsNumberedListItem defines a model
type BlocksListResultsItemsNumberedListItem struct {
	RichText BlocksListResultsItemsNumberedListItemRichText `json:"rich_text,omitempty"`
	Color    string                                         `json:"color,omitzero"`
}

// BlocksListResultsItemsNumberedListItemRichText defines a model
type BlocksListResultsItemsNumberedListItemRichText []BlocksListResultsItemsNumberedListItemRichTextItems

// BlocksListResultsItemsNumberedListItemRichTextItems defines a model
type BlocksListResultsItemsNumberedListItemRichTextItems struct {
	Type        string                                                         `json:"type,omitzero"`
	Text        BlocksListResultsItemsNumberedListItemRichTextItemsText        `json:"text"`
	Annotations BlocksListResultsItemsNumberedListItemRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                                         `json:"plain_text,omitzero"`
	Href        struct{}                                                       `json:"href"`
}

// BlocksListResultsItemsNumberedListItemRichTextItemsAnnotations defines a model
type BlocksListResultsItemsNumberedListItemRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsNumberedListItemRichTextItemsText defines a model
type BlocksListResultsItemsNumberedListItemRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsParagraph defines a model
type BlocksListResultsItemsParagraph struct {
	RichText BlocksListResultsItemsParagraphRichText `json:"rich_text,omitempty"`
	Color    string                                  `json:"color,omitzero"`
}

// BlocksListResultsItemsParagraphRichText defines a model
type BlocksListResultsItemsParagraphRichText []BlocksListResultsItemsParagraphRichTextItems

// BlocksListResultsItemsParagraphRichTextItems defines a model
type BlocksListResultsItemsParagraphRichTextItems struct {
	Type        string                                                   `json:"type,omitzero"`
	Text        *BlocksListResultsItemsParagraphRichTextItemsText        `json:"text,omitempty"`
	Annotations *BlocksListResultsItemsParagraphRichTextItemsAnnotations `json:"annotations,omitempty"`
	PlainText   string                                                   `json:"plain_text,omitzero"`
	Href        *url.URL                                                 `json:"href,omitempty"`
	Mention     *BlocksListResultsItemsParagraphRichTextItemsMention     `json:"mention,omitempty"`
	Equation    *BlocksListResultsItemsParagraphRichTextItemsEquation    `json:"equation,omitempty"`
}

// BlocksListResultsItemsParagraphRichTextItemsAnnotations defines a model
type BlocksListResultsItemsParagraphRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsParagraphRichTextItemsEquation defines a model
type BlocksListResultsItemsParagraphRichTextItemsEquation struct {
	Expression string `json:"expression,omitzero"`
}

// BlocksListResultsItemsParagraphRichTextItemsMention defines a model
type BlocksListResultsItemsParagraphRichTextItemsMention struct {
	Type        string                                                         `json:"type,omitzero"`
	LinkMention BlocksListResultsItemsParagraphRichTextItemsMentionLinkMention `json:"link_mention"`
	Database    *BlocksListResultsItemsParagraphRichTextItemsMentionDatabase   `json:"database,omitempty"`
	User        *BlocksListResultsItemsParagraphRichTextItemsMentionUser       `json:"user,omitempty"`
	Date        *BlocksListResultsItemsParagraphRichTextItemsMentionDate       `json:"date,omitempty"`
	Page        *BlocksListResultsItemsParagraphRichTextItemsMentionPage       `json:"page,omitempty"`
}

// BlocksListResultsItemsParagraphRichTextItemsMentionDatabase defines a model
type BlocksListResultsItemsParagraphRichTextItemsMentionDatabase struct {
	ID uuid.UUID `json:"id,omitzero"`
}

// BlocksListResultsItemsParagraphRichTextItemsMentionDate defines a model
type BlocksListResultsItemsParagraphRichTextItemsMentionDate struct {
	Start    string   `json:"start,omitzero"`
	End      struct{} `json:"end"`
	TimeZone struct{} `json:"time_zone"`
}

// BlocksListResultsItemsParagraphRichTextItemsMentionLinkMention defines a model
type BlocksListResultsItemsParagraphRichTextItemsMentionLinkMention struct {
	Href        url.URL `json:"href,omitzero"`
	Title       string  `json:"title,omitzero"`
	Description string  `json:"description,omitzero"`
}

// BlocksListResultsItemsParagraphRichTextItemsMentionPage defines a model
type BlocksListResultsItemsParagraphRichTextItemsMentionPage struct {
	ID uuid.UUID `json:"id,omitzero"`
}

// BlocksListResultsItemsParagraphRichTextItemsMentionUser defines a model
type BlocksListResultsItemsParagraphRichTextItemsMentionUser struct {
	Object    string                                                        `json:"object,omitzero"`
	ID        uuid.UUID                                                     `json:"id,omitzero"`
	Name      string                                                        `json:"name,omitzero"`
	AvatarURL url.URL                                                       `json:"avatar_url,omitzero"`
	Type      string                                                        `json:"type,omitzero"`
	Person    BlocksListResultsItemsParagraphRichTextItemsMentionUserPerson `json:"person"`
}

// BlocksListResultsItemsParagraphRichTextItemsMentionUserPerson defines a model
type BlocksListResultsItemsParagraphRichTextItemsMentionUserPerson struct {
	Email types.Email `json:"email,omitzero"`
}

// BlocksListResultsItemsParagraphRichTextItemsText defines a model
type BlocksListResultsItemsParagraphRichTextItemsText struct {
	Content string                                               `json:"content,omitzero"`
	Link    BlocksListResultsItemsParagraphRichTextItemsTextLink `json:"link"`
}

// BlocksListResultsItemsParagraphRichTextItemsTextLink defines a model
type BlocksListResultsItemsParagraphRichTextItemsTextLink struct {
	URL *url.URL `json:"url,omitempty"`
}

// BlocksListResultsItemsParent defines a model
type BlocksListResultsItemsParent struct {
	Type   string    `json:"type,omitzero"`
	PageID uuid.UUID `json:"page_id,omitzero"`
}

// BlocksListResultsItemsPdf defines a model
type BlocksListResultsItemsPdf struct {
	Caption  BlocksListResultsItemsPdfCaption  `json:"caption,omitempty"`
	Type     string                            `json:"type,omitzero"`
	External BlocksListResultsItemsPdfExternal `json:"external"`
	File     *BlocksListResultsItemsPdfFile    `json:"file,omitempty"`
}

// BlocksListResultsItemsPdfCaption defines a model
type BlocksListResultsItemsPdfCaption []BlocksListResultsItemsPdfCaptionItems

// BlocksListResultsItemsPdfCaptionItems defines a model
type BlocksListResultsItemsPdfCaptionItems struct {
	Type        string                                           `json:"type,omitzero"`
	Text        BlocksListResultsItemsPdfCaptionItemsText        `json:"text"`
	Annotations BlocksListResultsItemsPdfCaptionItemsAnnotations `json:"annotations"`
	PlainText   string                                           `json:"plain_text,omitzero"`
	Href        struct{}                                         `json:"href"`
}

// BlocksListResultsItemsPdfCaptionItemsAnnotations defines a model
type BlocksListResultsItemsPdfCaptionItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsPdfCaptionItemsText defines a model
type BlocksListResultsItemsPdfCaptionItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsPdfExternal defines a model
type BlocksListResultsItemsPdfExternal struct {
	URL url.URL `json:"url,omitzero"`
}

// BlocksListResultsItemsPdfFile defines a model
type BlocksListResultsItemsPdfFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// BlocksListResultsItemsQuote defines a model
type BlocksListResultsItemsQuote struct {
	RichText BlocksListResultsItemsQuoteRichText `json:"rich_text,omitempty"`
	Color    string                              `json:"color,omitzero"`
}

// BlocksListResultsItemsQuoteRichText defines a model
type BlocksListResultsItemsQuoteRichText []BlocksListResultsItemsQuoteRichTextItems

// BlocksListResultsItemsQuoteRichTextItems defines a model
type BlocksListResultsItemsQuoteRichTextItems struct {
	Type        string                                              `json:"type,omitzero"`
	Text        BlocksListResultsItemsQuoteRichTextItemsText        `json:"text"`
	Annotations BlocksListResultsItemsQuoteRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                              `json:"plain_text,omitzero"`
	Href        struct{}                                            `json:"href"`
}

// BlocksListResultsItemsQuoteRichTextItemsAnnotations defines a model
type BlocksListResultsItemsQuoteRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsQuoteRichTextItemsText defines a model
type BlocksListResultsItemsQuoteRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsSyncedBlock defines a model
type BlocksListResultsItemsSyncedBlock struct {
	SyncedFrom BlocksListResultsItemsSyncedBlockSyncedFrom `json:"synced_from"`
}

// BlocksListResultsItemsSyncedBlockSyncedFrom defines a model
type BlocksListResultsItemsSyncedBlockSyncedFrom struct {
	Type    string    `json:"type,omitzero"`
	BlockID uuid.UUID `json:"block_id,omitzero"`
}

// BlocksListResultsItemsTable defines a model
type BlocksListResultsItemsTable struct {
	TableWidth      int  `json:"table_width,omitzero"`
	HasColumnHeader bool `json:"has_column_header,omitzero"`
	HasRowHeader    bool `json:"has_row_header,omitzero"`
}

// BlocksListResultsItemsTableOfContents defines a model
type BlocksListResultsItemsTableOfContents struct {
	Color string `json:"color,omitzero"`
}

// BlocksListResultsItemsToDo defines a model
type BlocksListResultsItemsToDo struct {
	RichText BlocksListResultsItemsToDoRichText `json:"rich_text,omitempty"`
	Checked  bool                               `json:"checked,omitzero"`
	Color    string                             `json:"color,omitzero"`
}

// BlocksListResultsItemsToDoRichText defines a model
type BlocksListResultsItemsToDoRichText []BlocksListResultsItemsToDoRichTextItems

// BlocksListResultsItemsToDoRichTextItems defines a model
type BlocksListResultsItemsToDoRichTextItems struct {
	Type        string                                             `json:"type,omitzero"`
	Text        BlocksListResultsItemsToDoRichTextItemsText        `json:"text"`
	Annotations BlocksListResultsItemsToDoRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                             `json:"plain_text,omitzero"`
	Href        struct{}                                           `json:"href"`
}

// BlocksListResultsItemsToDoRichTextItemsAnnotations defines a model
type BlocksListResultsItemsToDoRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsToDoRichTextItemsText defines a model
type BlocksListResultsItemsToDoRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsToggle defines a model
type BlocksListResultsItemsToggle struct {
	RichText BlocksListResultsItemsToggleRichText `json:"rich_text,omitempty"`
	Color    string                               `json:"color,omitzero"`
}

// BlocksListResultsItemsToggleRichText defines a model
type BlocksListResultsItemsToggleRichText []BlocksListResultsItemsToggleRichTextItems

// BlocksListResultsItemsToggleRichTextItems defines a model
type BlocksListResultsItemsToggleRichTextItems struct {
	Type        string                                               `json:"type,omitzero"`
	Text        BlocksListResultsItemsToggleRichTextItemsText        `json:"text"`
	Annotations BlocksListResultsItemsToggleRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                               `json:"plain_text,omitzero"`
	Href        struct{}                                             `json:"href"`
}

// BlocksListResultsItemsToggleRichTextItemsAnnotations defines a model
type BlocksListResultsItemsToggleRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksListResultsItemsToggleRichTextItemsText defines a model
type BlocksListResultsItemsToggleRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksListResultsItemsVideo defines a model
type BlocksListResultsItemsVideo struct {
	Caption  []struct{}                           `json:"caption,omitempty"`
	Type     string                               `json:"type,omitzero"`
	File     BlocksListResultsItemsVideoFile      `json:"file"`
	External *BlocksListResultsItemsVideoExternal `json:"external,omitempty"`
}

// BlocksListResultsItemsVideoExternal defines a model
type BlocksListResultsItemsVideoExternal struct {
	URL url.URL `json:"url,omitzero"`
}

// BlocksListResultsItemsVideoFile defines a model
type BlocksListResultsItemsVideoFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// The color of the block.
type Color string

const (
	ColorDefault          Color = "default"
	ColorGray             Color = "gray"
	ColorBrown            Color = "brown"
	ColorOrange           Color = "orange"
	ColorYellow           Color = "yellow"
	ColorGreen            Color = "green"
	ColorBlue             Color = "blue"
	ColorPurple           Color = "purple"
	ColorPink             Color = "pink"
	ColorRed              Color = "red"
	ColorGrayBackground   Color = "gray_background"
	ColorBrownBackground  Color = "brown_background"
	ColorOrangeBackground Color = "orange_background"
	ColorYellowBackground Color = "yellow_background"
	ColorGreenBackground  Color = "green_background"
	ColorBlueBackground   Color = "blue_background"
	ColorPurpleBackground Color = "purple_background"
	ColorPinkBackground   Color = "pink_background"
	ColorRedBackground    Color = "red_background"
)

// An external file is any URL that isn't hosted by Notion.
type ExternalFile struct {
	// Link to the externally hosted content.
	URL url.URL `json:"url,omitzero"`
}

// File objects contain data about files uploaded to Notion as well as external files linked in Notion.
type File struct {
	// Type of this file object.
	Type FileType `json:"type,omitzero"`
	// An external file is any URL that isn't hosted by Notion.
	External *ExternalFile `json:"external,omitempty"`
}

// Type of this file object.
type FileType string

const (
	FileTypeFile     FileType = "file"
	FileTypeExternal FileType = "external"
)

// Page or database icon. It is either an emoji or a file.
type Icon struct {
	// Type of icon.
	Type IconType `json:"type,omitzero"`
	// Emoji character.
	Emoji string `json:"emoji,omitzero"`
}

// Type of icon.
type IconType string

const (
	IconTypeEmoji    IconType = "emoji"
	IconTypeFile     IconType = "file"
	IconTypeExternal IconType = "external"
)

// An inline link in a text.
type Link struct{}

// The Page object contains the [property values](https://developers.notion.com/reference/property-value-object) of a single Notion page.
//
// All pages have a parent. If the parent is a [database](https://developers.notion.com/reference/database), the property values conform to the schema laid out database's [properties](https://developers.notion.com/reference/property-object). Otherwise, the only property value is the `title`.
//
// Page content is available as [blocks](https://developers.notion.com/reference/block). The content can be read using [retrieve block children](https://developers.notion.com/reference/get-block-children) and appended using [append block children](https://developers.notion.com/reference/patch-block-children).
type Page struct {
	// Always "page".
	Object string    `json:"object,omitzero"`
	ID     uuid.UUID `json:"id,omitzero"`
	// Date and time when this page was created. Formatted as an ISO 8601 date time string.
	CreatedTime time.Time `json:"created_time,omitzero"`
	// Date and time when this page was updated. Formatted as an ISO 8601 date time string.
	LastEditedTime time.Time     `json:"last_edited_time,omitzero"`
	CreatedBy      UserReference `json:"created_by"`
	LastEditedBy   UserReference `json:"last_edited_by"`
	// File objects contain data about files uploaded to Notion as well as external files linked in Notion.
	Cover File `json:"cover"`
	// Page or database icon. It is either an emoji or a file.
	Icon Icon `json:"icon"`
	// The `parent` property of a page or database contains these keys. Mandatory when creating, must be missing when updating.
	Parent Parent `json:"parent"`
	// The archived status of the page.
	Archived bool `json:"archived,omitzero"`
	InTrash  bool `json:"in_trash,omitzero"`
	// Properties of a page or database.
	Properties PropertyValues `json:"properties"`
	// The URL of the Notion page.
	URL       url.URL   `json:"url,omitzero"`
	PublicURL url.URL   `json:"public_url,omitzero"`
	RequestID uuid.UUID `json:"request_id,omitzero"`
}

// The `parent` property of a page or database contains these keys. Mandatory when creating, must be missing when updating.
type Parent struct {
	// The type of the parent.
	Type   ParentType `json:"type,omitzero"`
	PageID *uuid.UUID `json:"page_id,omitempty"`
}

// The type of the parent.
type ParentType string

const (
	ParentTypePageID     ParentType = "page_id"
	ParentTypeWorkspace  ParentType = "workspace"
	ParentTypeBlockID    ParentType = "block_id"
	ParentTypeDatabaseID ParentType = "database_id"
)

// Type of the property.
type PropertyType string

const (
	PropertyTypeRichText       PropertyType = "rich_text"
	PropertyTypeNumber         PropertyType = "number"
	PropertyTypeSelect         PropertyType = "select"
	PropertyTypeStatus         PropertyType = "status"
	PropertyTypeMultiSelect    PropertyType = "multi_select"
	PropertyTypeDate           PropertyType = "date"
	PropertyTypeFormula        PropertyType = "formula"
	PropertyTypeRelation       PropertyType = "relation"
	PropertyTypeRollup         PropertyType = "rollup"
	PropertyTypeTitle          PropertyType = "title"
	PropertyTypePeople         PropertyType = "people"
	PropertyTypeFiles          PropertyType = "files"
	PropertyTypeCheckbox       PropertyType = "checkbox"
	PropertyTypeURL            PropertyType = "url"
	PropertyTypeEmail          PropertyType = "email"
	PropertyTypePhoneNumber    PropertyType = "phone_number"
	PropertyTypeCreatedTime    PropertyType = "created_time"
	PropertyTypeCreatedBy      PropertyType = "created_by"
	PropertyTypeLastEditedTime PropertyType = "last_edited_time"
	PropertyTypeLastEditedBy   PropertyType = "last_edited_by"
	PropertyTypeButton         PropertyType = "button"
)

// A property value defines the identifier, type, and value of a page property in a page object. It's used when retrieving and updating pages ex: Create and Update pages.
type PropertyValue struct {
	/*
	   Underlying identifier for the property. This identifier is guaranteed to remain constant when the property name changes. It may be a UUID, but is often a short random string.

	   The id may be used in place of name when creating or updating pages.
	*/
	ID string `json:"id,omitzero"`
	// Type of the property.
	Type  PropertyType `json:"type,omitzero"`
	Title RichTexts    `json:"title,omitempty"`
}

// Properties of a page or database.
type PropertyValues map[string]PropertyValue

// Rich text objects contain data for displaying formatted text, mentions, and equations. A rich text object also contains annotations for style information. Arrays of rich text objects are used [within property objects](https://developers.notion.com/reference/database-property) and [property value objects](https://developers.notion.com/reference/page-property-value) to create what a user sees as a single text value in Notion.
type RichText struct {
	// Type of this rich text object.
	Type RichTextType `json:"type,omitzero"`
	// Text objects contain this information within the `text` property of a RichText object.
	Text Text `json:"text"`
	// Style information which applies to the whole rich text object.
	Annotations Annotations `json:"annotations"`
	// The plain text without annotations.
	PlainText string `json:"plain_text,omitzero"`
	// The URL of any link or internal Notion mention in this text, if any.
	Href *url.URL `json:"href,omitempty"`
}

// Type of this rich text object.
type RichTextType string

const (
	RichTextTypeText     RichTextType = "text"
	RichTextTypeMention  RichTextType = "mention"
	RichTextTypeEquation RichTextType = "equation"
)

// RichTexts defines a model
type RichTexts []RichText

// Text objects contain this information within the `text` property of a RichText object.
type Text struct {
	// Text content. This field contains the actual content of your text and is probably the field you'll use most often.
	Content string `json:"content,omitzero"`
	// An inline link in a text.
	Link *Link `json:"link,omitempty"`
}

// UserReference defines a model
type UserReference struct {
	// Always "user"
	Object string    `json:"object,omitzero"`
	ID     uuid.UUID `json:"id,omitzero"`
}
