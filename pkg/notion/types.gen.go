// This file provides types for the API.
//
// Code generated by github.com/MarkRosemaker DO NOT EDIT.

package notion

import (
	"net/url"
	"time"

	"github.com/go-api-libs/types"
	"github.com/google/uuid"
)

type GetBlocksParams struct {
	PageSize int
}

// Style information which applies to the whole rich text object.
type Annotations struct {
	// Whether the text is **bolded**.
	Bold bool `json:"bold,omitzero"`
	// Whether the text is *italicized*.
	Italic bool `json:"italic,omitzero"`
	// Whether the text is struck through.
	Strikethrough bool `json:"strikethrough,omitzero"`
	// Whether the text is underlined.
	Underline bool `json:"underline,omitzero"`
	// Whether the text is code `style`.
	Code bool `json:"code,omitzero"`
	// The color of the block.
	Color Color `json:"color,omitzero"`
}

// Blocks defines a model
type Blocks []BlocksItems

// BlocksItems defines a model
type BlocksItems struct {
	Object           string                       `json:"object,omitzero"`
	ID               uuid.UUID                    `json:"id,omitzero"`
	Parent           BlocksItemsParent            `json:"parent"`
	CreatedTime      time.Time                    `json:"created_time,omitzero"`
	LastEditedTime   time.Time                    `json:"last_edited_time,omitzero"`
	CreatedBy        BlocksItemsCreatedBy         `json:"created_by"`
	LastEditedBy     BlocksItemsLastEditedBy      `json:"last_edited_by"`
	HasChildren      bool                         `json:"has_children,omitzero"`
	Archived         bool                         `json:"archived,omitzero"`
	InTrash          bool                         `json:"in_trash,omitzero"`
	Type             string                       `json:"type,omitzero"`
	Paragraph        BlocksItemsParagraph         `json:"paragraph"`
	Heading1         *BlocksItemsHeading1         `json:"heading_1,omitempty"`
	Heading2         *BlocksItemsHeading2         `json:"heading_2,omitempty"`
	Heading3         *BlocksItemsHeading3         `json:"heading_3,omitempty"`
	Callout          *BlocksItemsCallout          `json:"callout,omitempty"`
	Quote            *BlocksItemsQuote            `json:"quote,omitempty"`
	SyncedBlock      *BlocksItemsSyncedBlock      `json:"synced_block,omitempty"`
	NumberedListItem *BlocksItemsNumberedListItem `json:"numbered_list_item,omitempty"`
	BulletedListItem *BlocksItemsBulletedListItem `json:"bulleted_list_item,omitempty"`
	ToDo             *BlocksItemsToDo             `json:"to_do,omitempty"`
	Toggle           *BlocksItemsToggle           `json:"toggle,omitempty"`
	Code             *BlocksItemsCode             `json:"code,omitempty"`
	ChildPage        *BlocksItemsChildPage        `json:"child_page,omitempty"`
	ChildDatabase    *BlocksItemsChildDatabase    `json:"child_database,omitempty"`
	Embed            *BlocksItemsEmbed            `json:"embed,omitempty"`
	PDF              *BlocksItemsPdf              `json:"pdf,omitempty"`
	ColumnList       *struct{}                    `json:"column_list,omitempty"`
	Video            *BlocksItemsVideo            `json:"video,omitempty"`
	File             *BlocksItemsFile             `json:"file,omitempty"`
	Bookmark         *BlocksItemsBookmark         `json:"bookmark,omitempty"`
	Equation         *BlocksItemsEquation         `json:"equation,omitempty"`
	Divider          *struct{}                    `json:"divider,omitempty"`
	TableOfContents  *BlocksItemsTableOfContents  `json:"table_of_contents,omitempty"`
	Breadcrumb       *struct{}                    `json:"breadcrumb,omitempty"`
	LinkPreview      *BlocksItemsLinkPreview      `json:"link_preview,omitempty"`
	Unsupported      *struct{}                    `json:"unsupported,omitempty"`
	LinkToPage       *BlocksItemsLinkToPage       `json:"link_to_page,omitempty"`
	Table            *BlocksItemsTable            `json:"table,omitempty"`
	Audio            *BlocksItemsAudio            `json:"audio,omitempty"`
}

// BlocksItemsAudio defines a model
type BlocksItemsAudio struct {
	Caption  []struct{}               `json:"caption,omitempty"`
	Type     string                   `json:"type,omitzero"`
	External BlocksItemsAudioExternal `json:"external"`
	File     *BlocksItemsAudioFile    `json:"file,omitempty"`
}

// BlocksItemsAudioExternal defines a model
type BlocksItemsAudioExternal struct {
	URL url.URL `json:"url,omitzero"`
}

// BlocksItemsAudioFile defines a model
type BlocksItemsAudioFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// BlocksItemsBookmark defines a model
type BlocksItemsBookmark struct {
	Caption BlocksItemsBookmarkCaption `json:"caption,omitempty"`
	URL     url.URL                    `json:"url,omitzero"`
}

// BlocksItemsBookmarkCaption defines a model
type BlocksItemsBookmarkCaption []BlocksItemsBookmarkCaptionItems

// BlocksItemsBookmarkCaptionItems defines a model
type BlocksItemsBookmarkCaptionItems struct {
	Type        string                                     `json:"type,omitzero"`
	Text        BlocksItemsBookmarkCaptionItemsText        `json:"text"`
	Annotations BlocksItemsBookmarkCaptionItemsAnnotations `json:"annotations"`
	PlainText   string                                     `json:"plain_text,omitzero"`
	Href        struct{}                                   `json:"href"`
}

// BlocksItemsBookmarkCaptionItemsAnnotations defines a model
type BlocksItemsBookmarkCaptionItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsBookmarkCaptionItemsText defines a model
type BlocksItemsBookmarkCaptionItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsBulletedListItem defines a model
type BlocksItemsBulletedListItem struct {
	RichText BlocksItemsBulletedListItemRichText `json:"rich_text,omitempty"`
	Color    string                              `json:"color,omitzero"`
}

// BlocksItemsBulletedListItemRichText defines a model
type BlocksItemsBulletedListItemRichText []BlocksItemsBulletedListItemRichTextItems

// BlocksItemsBulletedListItemRichTextItems defines a model
type BlocksItemsBulletedListItemRichTextItems struct {
	Type        string                                              `json:"type,omitzero"`
	Text        BlocksItemsBulletedListItemRichTextItemsText        `json:"text"`
	Annotations BlocksItemsBulletedListItemRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                              `json:"plain_text,omitzero"`
	Href        struct{}                                            `json:"href"`
}

// BlocksItemsBulletedListItemRichTextItemsAnnotations defines a model
type BlocksItemsBulletedListItemRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsBulletedListItemRichTextItemsText defines a model
type BlocksItemsBulletedListItemRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsCallout defines a model
type BlocksItemsCallout struct {
	RichText BlocksItemsCalloutRichText `json:"rich_text,omitempty"`
	Icon     BlocksItemsCalloutIcon     `json:"icon"`
	Color    string                     `json:"color,omitzero"`
}

// BlocksItemsCalloutIcon defines a model
type BlocksItemsCalloutIcon struct {
	Type     string                          `json:"type,omitzero"`
	Emoji    string                          `json:"emoji,omitzero"`
	External *BlocksItemsCalloutIconExternal `json:"external,omitempty"`
	File     *BlocksItemsCalloutIconFile     `json:"file,omitempty"`
}

// BlocksItemsCalloutIconExternal defines a model
type BlocksItemsCalloutIconExternal struct {
	URL url.URL `json:"url,omitzero"`
}

// BlocksItemsCalloutIconFile defines a model
type BlocksItemsCalloutIconFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// BlocksItemsCalloutRichText defines a model
type BlocksItemsCalloutRichText []BlocksItemsCalloutRichTextItems

// BlocksItemsCalloutRichTextItems defines a model
type BlocksItemsCalloutRichTextItems struct {
	Type        string                                     `json:"type,omitzero"`
	Text        BlocksItemsCalloutRichTextItemsText        `json:"text"`
	Annotations BlocksItemsCalloutRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                     `json:"plain_text,omitzero"`
	Href        struct{}                                   `json:"href"`
}

// BlocksItemsCalloutRichTextItemsAnnotations defines a model
type BlocksItemsCalloutRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsCalloutRichTextItemsText defines a model
type BlocksItemsCalloutRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsChildDatabase defines a model
type BlocksItemsChildDatabase struct {
	Title string `json:"title,omitzero"`
}

// BlocksItemsChildPage defines a model
type BlocksItemsChildPage struct {
	Title string `json:"title,omitzero"`
}

// BlocksItemsCode defines a model
type BlocksItemsCode struct {
	Caption  BlocksItemsCodeCaption  `json:"caption,omitempty"`
	RichText BlocksItemsCodeRichText `json:"rich_text,omitempty"`
	Language string                  `json:"language,omitzero"`
}

// BlocksItemsCodeCaption defines a model
type BlocksItemsCodeCaption []BlocksItemsCodeCaptionItems

// BlocksItemsCodeCaptionItems defines a model
type BlocksItemsCodeCaptionItems struct {
	Type        string                                 `json:"type,omitzero"`
	Text        BlocksItemsCodeCaptionItemsText        `json:"text"`
	Annotations BlocksItemsCodeCaptionItemsAnnotations `json:"annotations"`
	PlainText   string                                 `json:"plain_text,omitzero"`
	Href        struct{}                               `json:"href"`
}

// BlocksItemsCodeCaptionItemsAnnotations defines a model
type BlocksItemsCodeCaptionItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsCodeCaptionItemsText defines a model
type BlocksItemsCodeCaptionItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsCodeRichText defines a model
type BlocksItemsCodeRichText []BlocksItemsCodeRichTextItems

// BlocksItemsCodeRichTextItems defines a model
type BlocksItemsCodeRichTextItems struct {
	Type        string                                  `json:"type,omitzero"`
	Text        BlocksItemsCodeRichTextItemsText        `json:"text"`
	Annotations BlocksItemsCodeRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                  `json:"plain_text,omitzero"`
	Href        url.URL                                 `json:"href,omitzero"`
}

// BlocksItemsCodeRichTextItemsAnnotations defines a model
type BlocksItemsCodeRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsCodeRichTextItemsText defines a model
type BlocksItemsCodeRichTextItemsText struct {
	Content string                               `json:"content,omitzero"`
	Link    BlocksItemsCodeRichTextItemsTextLink `json:"link"`
}

// BlocksItemsCodeRichTextItemsTextLink defines a model
type BlocksItemsCodeRichTextItemsTextLink struct {
	URL *url.URL `json:"url,omitempty"`
}

// BlocksItemsCreatedBy defines a model
type BlocksItemsCreatedBy struct {
	Object string    `json:"object,omitzero"`
	ID     uuid.UUID `json:"id,omitzero"`
}

// BlocksItemsEmbed defines a model
type BlocksItemsEmbed struct {
	Caption BlocksItemsEmbedCaption `json:"caption,omitempty"`
	URL     url.URL                 `json:"url,omitzero"`
}

// BlocksItemsEmbedCaption defines a model
type BlocksItemsEmbedCaption []BlocksItemsEmbedCaptionItems

// BlocksItemsEmbedCaptionItems defines a model
type BlocksItemsEmbedCaptionItems struct {
	Type        string                                   `json:"type,omitzero"`
	Text        *BlocksItemsEmbedCaptionItemsText        `json:"text,omitempty"`
	Annotations *BlocksItemsEmbedCaptionItemsAnnotations `json:"annotations,omitempty"`
	PlainText   string                                   `json:"plain_text,omitzero"`
	Href        *struct{}                                `json:"href,omitempty"`
}

// BlocksItemsEmbedCaptionItemsAnnotations defines a model
type BlocksItemsEmbedCaptionItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsEmbedCaptionItemsText defines a model
type BlocksItemsEmbedCaptionItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsEquation defines a model
type BlocksItemsEquation struct {
	Expression string `json:"expression,omitzero"`
}

// BlocksItemsFile defines a model
type BlocksItemsFile struct {
	Caption []struct{}          `json:"caption,omitempty"`
	Type    string              `json:"type,omitzero"`
	File    BlocksItemsFileFile `json:"file"`
	Name    string              `json:"name,omitzero"`
}

// BlocksItemsFileFile defines a model
type BlocksItemsFileFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// BlocksItemsHeading1 defines a model
type BlocksItemsHeading1 struct {
	RichText     BlocksItemsHeading1RichText `json:"rich_text,omitempty"`
	IsToggleable bool                        `json:"is_toggleable,omitzero"`
	Color        string                      `json:"color,omitzero"`
}

// BlocksItemsHeading1RichText defines a model
type BlocksItemsHeading1RichText []BlocksItemsHeading1RichTextItems

// BlocksItemsHeading1RichTextItems defines a model
type BlocksItemsHeading1RichTextItems struct {
	Type        string                                      `json:"type,omitzero"`
	Text        BlocksItemsHeading1RichTextItemsText        `json:"text"`
	Annotations BlocksItemsHeading1RichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                      `json:"plain_text,omitzero"`
	Href        struct{}                                    `json:"href"`
}

// BlocksItemsHeading1RichTextItemsAnnotations defines a model
type BlocksItemsHeading1RichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsHeading1RichTextItemsText defines a model
type BlocksItemsHeading1RichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsHeading2 defines a model
type BlocksItemsHeading2 struct {
	RichText     BlocksItemsHeading2RichText `json:"rich_text,omitempty"`
	IsToggleable bool                        `json:"is_toggleable,omitzero"`
	Color        string                      `json:"color,omitzero"`
}

// BlocksItemsHeading2RichText defines a model
type BlocksItemsHeading2RichText []BlocksItemsHeading2RichTextItems

// BlocksItemsHeading2RichTextItems defines a model
type BlocksItemsHeading2RichTextItems struct {
	Type        string                                      `json:"type,omitzero"`
	Text        BlocksItemsHeading2RichTextItemsText        `json:"text"`
	Annotations BlocksItemsHeading2RichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                      `json:"plain_text,omitzero"`
	Href        struct{}                                    `json:"href"`
}

// BlocksItemsHeading2RichTextItemsAnnotations defines a model
type BlocksItemsHeading2RichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsHeading2RichTextItemsText defines a model
type BlocksItemsHeading2RichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsHeading3 defines a model
type BlocksItemsHeading3 struct {
	RichText     BlocksItemsHeading3RichText `json:"rich_text,omitempty"`
	IsToggleable bool                        `json:"is_toggleable,omitzero"`
	Color        string                      `json:"color,omitzero"`
}

// BlocksItemsHeading3RichText defines a model
type BlocksItemsHeading3RichText []BlocksItemsHeading3RichTextItems

// BlocksItemsHeading3RichTextItems defines a model
type BlocksItemsHeading3RichTextItems struct {
	Type        string                                      `json:"type,omitzero"`
	Text        BlocksItemsHeading3RichTextItemsText        `json:"text"`
	Annotations BlocksItemsHeading3RichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                      `json:"plain_text,omitzero"`
	Href        struct{}                                    `json:"href"`
}

// BlocksItemsHeading3RichTextItemsAnnotations defines a model
type BlocksItemsHeading3RichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsHeading3RichTextItemsText defines a model
type BlocksItemsHeading3RichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsLastEditedBy defines a model
type BlocksItemsLastEditedBy struct {
	Object string    `json:"object,omitzero"`
	ID     uuid.UUID `json:"id,omitzero"`
}

// BlocksItemsLinkPreview defines a model
type BlocksItemsLinkPreview struct {
	URL url.URL `json:"url,omitzero"`
}

// BlocksItemsLinkToPage defines a model
type BlocksItemsLinkToPage struct {
	Type   string    `json:"type,omitzero"`
	PageID uuid.UUID `json:"page_id,omitzero"`
}

// BlocksItemsNumberedListItem defines a model
type BlocksItemsNumberedListItem struct {
	RichText BlocksItemsNumberedListItemRichText `json:"rich_text,omitempty"`
	Color    string                              `json:"color,omitzero"`
}

// BlocksItemsNumberedListItemRichText defines a model
type BlocksItemsNumberedListItemRichText []BlocksItemsNumberedListItemRichTextItems

// BlocksItemsNumberedListItemRichTextItems defines a model
type BlocksItemsNumberedListItemRichTextItems struct {
	Type        string                                              `json:"type,omitzero"`
	Text        BlocksItemsNumberedListItemRichTextItemsText        `json:"text"`
	Annotations BlocksItemsNumberedListItemRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                              `json:"plain_text,omitzero"`
	Href        struct{}                                            `json:"href"`
}

// BlocksItemsNumberedListItemRichTextItemsAnnotations defines a model
type BlocksItemsNumberedListItemRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsNumberedListItemRichTextItemsText defines a model
type BlocksItemsNumberedListItemRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsParagraph defines a model
type BlocksItemsParagraph struct {
	RichText BlocksItemsParagraphRichText `json:"rich_text,omitempty"`
	Color    string                       `json:"color,omitzero"`
}

// BlocksItemsParagraphRichText defines a model
type BlocksItemsParagraphRichText []BlocksItemsParagraphRichTextItems

// BlocksItemsParagraphRichTextItems defines a model
type BlocksItemsParagraphRichTextItems struct {
	Type        string                                        `json:"type,omitzero"`
	Text        *BlocksItemsParagraphRichTextItemsText        `json:"text,omitempty"`
	Annotations *BlocksItemsParagraphRichTextItemsAnnotations `json:"annotations,omitempty"`
	PlainText   string                                        `json:"plain_text,omitzero"`
	Href        *url.URL                                      `json:"href,omitempty"`
	Mention     *BlocksItemsParagraphRichTextItemsMention     `json:"mention,omitempty"`
	Equation    *BlocksItemsParagraphRichTextItemsEquation    `json:"equation,omitempty"`
}

// BlocksItemsParagraphRichTextItemsAnnotations defines a model
type BlocksItemsParagraphRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsParagraphRichTextItemsEquation defines a model
type BlocksItemsParagraphRichTextItemsEquation struct {
	Expression string `json:"expression,omitzero"`
}

// BlocksItemsParagraphRichTextItemsMention defines a model
type BlocksItemsParagraphRichTextItemsMention struct {
	Type        string                                              `json:"type,omitzero"`
	LinkMention BlocksItemsParagraphRichTextItemsMentionLinkMention `json:"link_mention"`
	Database    *BlocksItemsParagraphRichTextItemsMentionDatabase   `json:"database,omitempty"`
	User        *BlocksItemsParagraphRichTextItemsMentionUser       `json:"user,omitempty"`
	Date        *BlocksItemsParagraphRichTextItemsMentionDate       `json:"date,omitempty"`
	Page        *BlocksItemsParagraphRichTextItemsMentionPage       `json:"page,omitempty"`
}

// BlocksItemsParagraphRichTextItemsMentionDatabase defines a model
type BlocksItemsParagraphRichTextItemsMentionDatabase struct {
	ID uuid.UUID `json:"id,omitzero"`
}

// BlocksItemsParagraphRichTextItemsMentionDate defines a model
type BlocksItemsParagraphRichTextItemsMentionDate struct {
	Start    string   `json:"start,omitzero"`
	End      struct{} `json:"end"`
	TimeZone struct{} `json:"time_zone"`
}

// BlocksItemsParagraphRichTextItemsMentionLinkMention defines a model
type BlocksItemsParagraphRichTextItemsMentionLinkMention struct {
	Href        url.URL `json:"href,omitzero"`
	Title       string  `json:"title,omitzero"`
	Description string  `json:"description,omitzero"`
}

// BlocksItemsParagraphRichTextItemsMentionPage defines a model
type BlocksItemsParagraphRichTextItemsMentionPage struct {
	ID uuid.UUID `json:"id,omitzero"`
}

// BlocksItemsParagraphRichTextItemsMentionUser defines a model
type BlocksItemsParagraphRichTextItemsMentionUser struct {
	Object    string                                             `json:"object,omitzero"`
	ID        uuid.UUID                                          `json:"id,omitzero"`
	Name      string                                             `json:"name,omitzero"`
	AvatarURL url.URL                                            `json:"avatar_url,omitzero"`
	Type      string                                             `json:"type,omitzero"`
	Person    BlocksItemsParagraphRichTextItemsMentionUserPerson `json:"person"`
}

// BlocksItemsParagraphRichTextItemsMentionUserPerson defines a model
type BlocksItemsParagraphRichTextItemsMentionUserPerson struct {
	Email types.Email `json:"email,omitzero"`
}

// BlocksItemsParagraphRichTextItemsText defines a model
type BlocksItemsParagraphRichTextItemsText struct {
	Content string                                    `json:"content,omitzero"`
	Link    BlocksItemsParagraphRichTextItemsTextLink `json:"link"`
}

// BlocksItemsParagraphRichTextItemsTextLink defines a model
type BlocksItemsParagraphRichTextItemsTextLink struct {
	URL *url.URL `json:"url,omitempty"`
}

// BlocksItemsParent defines a model
type BlocksItemsParent struct {
	Type   string    `json:"type,omitzero"`
	PageID uuid.UUID `json:"page_id,omitzero"`
}

// BlocksItemsPdf defines a model
type BlocksItemsPdf struct {
	Caption  BlocksItemsPdfCaption  `json:"caption,omitempty"`
	Type     string                 `json:"type,omitzero"`
	External BlocksItemsPdfExternal `json:"external"`
	File     *BlocksItemsPdfFile    `json:"file,omitempty"`
}

// BlocksItemsPdfCaption defines a model
type BlocksItemsPdfCaption []BlocksItemsPdfCaptionItems

// BlocksItemsPdfCaptionItems defines a model
type BlocksItemsPdfCaptionItems struct {
	Type        string                                `json:"type,omitzero"`
	Text        BlocksItemsPdfCaptionItemsText        `json:"text"`
	Annotations BlocksItemsPdfCaptionItemsAnnotations `json:"annotations"`
	PlainText   string                                `json:"plain_text,omitzero"`
	Href        struct{}                              `json:"href"`
}

// BlocksItemsPdfCaptionItemsAnnotations defines a model
type BlocksItemsPdfCaptionItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsPdfCaptionItemsText defines a model
type BlocksItemsPdfCaptionItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsPdfExternal defines a model
type BlocksItemsPdfExternal struct {
	URL url.URL `json:"url,omitzero"`
}

// BlocksItemsPdfFile defines a model
type BlocksItemsPdfFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// BlocksItemsQuote defines a model
type BlocksItemsQuote struct {
	RichText BlocksItemsQuoteRichText `json:"rich_text,omitempty"`
	Color    string                   `json:"color,omitzero"`
}

// BlocksItemsQuoteRichText defines a model
type BlocksItemsQuoteRichText []BlocksItemsQuoteRichTextItems

// BlocksItemsQuoteRichTextItems defines a model
type BlocksItemsQuoteRichTextItems struct {
	Type        string                                   `json:"type,omitzero"`
	Text        BlocksItemsQuoteRichTextItemsText        `json:"text"`
	Annotations BlocksItemsQuoteRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                   `json:"plain_text,omitzero"`
	Href        struct{}                                 `json:"href"`
}

// BlocksItemsQuoteRichTextItemsAnnotations defines a model
type BlocksItemsQuoteRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsQuoteRichTextItemsText defines a model
type BlocksItemsQuoteRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsSyncedBlock defines a model
type BlocksItemsSyncedBlock struct {
	SyncedFrom BlocksItemsSyncedBlockSyncedFrom `json:"synced_from"`
}

// BlocksItemsSyncedBlockSyncedFrom defines a model
type BlocksItemsSyncedBlockSyncedFrom struct {
	Type    string    `json:"type,omitzero"`
	BlockID uuid.UUID `json:"block_id,omitzero"`
}

// BlocksItemsTable defines a model
type BlocksItemsTable struct {
	TableWidth      int  `json:"table_width,omitzero"`
	HasColumnHeader bool `json:"has_column_header,omitzero"`
	HasRowHeader    bool `json:"has_row_header,omitzero"`
}

// BlocksItemsTableOfContents defines a model
type BlocksItemsTableOfContents struct {
	Color string `json:"color,omitzero"`
}

// BlocksItemsToDo defines a model
type BlocksItemsToDo struct {
	RichText BlocksItemsToDoRichText `json:"rich_text,omitempty"`
	Checked  bool                    `json:"checked,omitzero"`
	Color    string                  `json:"color,omitzero"`
}

// BlocksItemsToDoRichText defines a model
type BlocksItemsToDoRichText []BlocksItemsToDoRichTextItems

// BlocksItemsToDoRichTextItems defines a model
type BlocksItemsToDoRichTextItems struct {
	Type        string                                  `json:"type,omitzero"`
	Text        BlocksItemsToDoRichTextItemsText        `json:"text"`
	Annotations BlocksItemsToDoRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                  `json:"plain_text,omitzero"`
	Href        struct{}                                `json:"href"`
}

// BlocksItemsToDoRichTextItemsAnnotations defines a model
type BlocksItemsToDoRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsToDoRichTextItemsText defines a model
type BlocksItemsToDoRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsToggle defines a model
type BlocksItemsToggle struct {
	RichText BlocksItemsToggleRichText `json:"rich_text,omitempty"`
	Color    string                    `json:"color,omitzero"`
}

// BlocksItemsToggleRichText defines a model
type BlocksItemsToggleRichText []BlocksItemsToggleRichTextItems

// BlocksItemsToggleRichTextItems defines a model
type BlocksItemsToggleRichTextItems struct {
	Type        string                                    `json:"type,omitzero"`
	Text        BlocksItemsToggleRichTextItemsText        `json:"text"`
	Annotations BlocksItemsToggleRichTextItemsAnnotations `json:"annotations"`
	PlainText   string                                    `json:"plain_text,omitzero"`
	Href        struct{}                                  `json:"href"`
}

// BlocksItemsToggleRichTextItemsAnnotations defines a model
type BlocksItemsToggleRichTextItemsAnnotations struct {
	Bold          bool   `json:"bold,omitzero"`
	Italic        bool   `json:"italic,omitzero"`
	Strikethrough bool   `json:"strikethrough,omitzero"`
	Underline     bool   `json:"underline,omitzero"`
	Code          bool   `json:"code,omitzero"`
	Color         string `json:"color,omitzero"`
}

// BlocksItemsToggleRichTextItemsText defines a model
type BlocksItemsToggleRichTextItemsText struct {
	Content string   `json:"content,omitzero"`
	Link    struct{} `json:"link"`
}

// BlocksItemsVideo defines a model
type BlocksItemsVideo struct {
	Caption  []struct{}                `json:"caption,omitempty"`
	Type     string                    `json:"type,omitzero"`
	File     BlocksItemsVideoFile      `json:"file"`
	External *BlocksItemsVideoExternal `json:"external,omitempty"`
}

// BlocksItemsVideoExternal defines a model
type BlocksItemsVideoExternal struct {
	URL url.URL `json:"url,omitzero"`
}

// BlocksItemsVideoFile defines a model
type BlocksItemsVideoFile struct {
	URL        url.URL   `json:"url,omitzero"`
	ExpiryTime time.Time `json:"expiry_time,omitzero"`
}

// BlocksList defines a model
type BlocksList struct {
	Object     string    `json:"object,omitzero"`
	Results    Blocks    `json:"results,omitempty"`
	NextCursor struct{}  `json:"next_cursor"`
	HasMore    bool      `json:"has_more,omitzero"`
	Type       string    `json:"type,omitzero"`
	Block      struct{}  `json:"block"`
	RequestID  uuid.UUID `json:"request_id,omitzero"`
}

// The color of the block.
type Color string

const (
	ColorDefault          Color = "default"
	ColorGray             Color = "gray"
	ColorBrown            Color = "brown"
	ColorOrange           Color = "orange"
	ColorYellow           Color = "yellow"
	ColorGreen            Color = "green"
	ColorBlue             Color = "blue"
	ColorPurple           Color = "purple"
	ColorPink             Color = "pink"
	ColorRed              Color = "red"
	ColorGrayBackground   Color = "gray_background"
	ColorBrownBackground  Color = "brown_background"
	ColorOrangeBackground Color = "orange_background"
	ColorYellowBackground Color = "yellow_background"
	ColorGreenBackground  Color = "green_background"
	ColorBlueBackground   Color = "blue_background"
	ColorPurpleBackground Color = "purple_background"
	ColorPinkBackground   Color = "pink_background"
	ColorRedBackground    Color = "red_background"
)

// An external file is any URL that isn't hosted by Notion.
type ExternalFile struct {
	// Link to the externally hosted content.
	URL url.URL `json:"url,omitzero"`
}

// File objects contain data about files uploaded to Notion as well as external files linked in Notion.
type File struct {
	// Type of this file object.
	Type FileType `json:"type,omitzero"`
	// An external file is any URL that isn't hosted by Notion.
	External *ExternalFile `json:"external,omitempty"`
}

// Type of this file object.
type FileType string

const (
	FileTypeFile     FileType = "file"
	FileTypeExternal FileType = "external"
)

// Page or database icon. It is either an emoji or a file.
type Icon struct {
	// Type of icon.
	Type IconType `json:"type,omitzero"`
	// Emoji character.
	Emoji string `json:"emoji,omitzero"`
}

// Type of icon.
type IconType string

const (
	IconTypeEmoji    IconType = "emoji"
	IconTypeFile     IconType = "file"
	IconTypeExternal IconType = "external"
)

// An inline link in a text.
type Link struct{}

// The Page object contains the [property values](https://developers.notion.com/reference/property-value-object) of a single Notion page.
//
// All pages have a parent. If the parent is a [database](https://developers.notion.com/reference/database), the property values conform to the schema laid out database's [properties](https://developers.notion.com/reference/property-object). Otherwise, the only property value is the `title`.
//
// Page content is available as [blocks](https://developers.notion.com/reference/block). The content can be read using [retrieve block children](https://developers.notion.com/reference/get-block-children) and appended using [append block children](https://developers.notion.com/reference/patch-block-children).
type Page struct {
	// Always "page".
	Object string    `json:"object,omitzero"`
	ID     uuid.UUID `json:"id,omitzero"`
	// Date and time when this page was created. Formatted as an ISO 8601 date time string.
	CreatedTime time.Time `json:"created_time,omitzero"`
	// Date and time when this page was updated. Formatted as an ISO 8601 date time string.
	LastEditedTime time.Time     `json:"last_edited_time,omitzero"`
	CreatedBy      UserReference `json:"created_by"`
	LastEditedBy   UserReference `json:"last_edited_by"`
	// File objects contain data about files uploaded to Notion as well as external files linked in Notion.
	Cover File `json:"cover"`
	// Page or database icon. It is either an emoji or a file.
	Icon Icon `json:"icon"`
	// The `parent` property of a page or database contains these keys. Mandatory when creating, must be missing when updating.
	Parent Parent `json:"parent"`
	// The archived status of the page.
	Archived bool `json:"archived,omitzero"`
	InTrash  bool `json:"in_trash,omitzero"`
	// Properties of a page or database.
	Properties PropertyValues `json:"properties"`
	// The URL of the Notion page.
	URL       url.URL   `json:"url,omitzero"`
	PublicURL url.URL   `json:"public_url,omitzero"`
	RequestID uuid.UUID `json:"request_id,omitzero"`
}

// The `parent` property of a page or database contains these keys. Mandatory when creating, must be missing when updating.
type Parent struct {
	// The type of the parent.
	Type   ParentType `json:"type,omitzero"`
	PageID *uuid.UUID `json:"page_id,omitempty"`
}

// The type of the parent.
type ParentType string

const (
	ParentTypePageID     ParentType = "page_id"
	ParentTypeWorkspace  ParentType = "workspace"
	ParentTypeBlockID    ParentType = "block_id"
	ParentTypeDatabaseID ParentType = "database_id"
)

// Type of the property.
type PropertyType string

const (
	PropertyTypeRichText       PropertyType = "rich_text"
	PropertyTypeNumber         PropertyType = "number"
	PropertyTypeSelect         PropertyType = "select"
	PropertyTypeStatus         PropertyType = "status"
	PropertyTypeMultiSelect    PropertyType = "multi_select"
	PropertyTypeDate           PropertyType = "date"
	PropertyTypeFormula        PropertyType = "formula"
	PropertyTypeRelation       PropertyType = "relation"
	PropertyTypeRollup         PropertyType = "rollup"
	PropertyTypeTitle          PropertyType = "title"
	PropertyTypePeople         PropertyType = "people"
	PropertyTypeFiles          PropertyType = "files"
	PropertyTypeCheckbox       PropertyType = "checkbox"
	PropertyTypeURL            PropertyType = "url"
	PropertyTypeEmail          PropertyType = "email"
	PropertyTypePhoneNumber    PropertyType = "phone_number"
	PropertyTypeCreatedTime    PropertyType = "created_time"
	PropertyTypeCreatedBy      PropertyType = "created_by"
	PropertyTypeLastEditedTime PropertyType = "last_edited_time"
	PropertyTypeLastEditedBy   PropertyType = "last_edited_by"
	PropertyTypeButton         PropertyType = "button"
)

// A property value defines the identifier, type, and value of a page property in a page object. It's used when retrieving and updating pages ex: Create and Update pages.
type PropertyValue struct {
	/*
	   Underlying identifier for the property. This identifier is guaranteed to remain constant when the property name changes. It may be a UUID, but is often a short random string.

	   The id may be used in place of name when creating or updating pages.
	*/
	ID string `json:"id,omitzero"`
	// Type of the property.
	Type  PropertyType `json:"type,omitzero"`
	Title RichTexts    `json:"title,omitempty"`
}

// Properties of a page or database.
type PropertyValues map[string]PropertyValue

// Rich text objects contain data for displaying formatted text, mentions, and equations. A rich text object also contains annotations for style information. Arrays of rich text objects are used [within property objects](https://developers.notion.com/reference/database-property) and [property value objects](https://developers.notion.com/reference/page-property-value) to create what a user sees as a single text value in Notion.
type RichText struct {
	// Type of this rich text object.
	Type RichTextType `json:"type,omitzero"`
	// Text objects contain this information within the `text` property of a RichText object.
	Text Text `json:"text"`
	// Style information which applies to the whole rich text object.
	Annotations Annotations `json:"annotations"`
	// The plain text without annotations.
	PlainText string `json:"plain_text,omitzero"`
	// The URL of any link or internal Notion mention in this text, if any.
	Href *url.URL `json:"href,omitempty"`
}

// Type of this rich text object.
type RichTextType string

const (
	RichTextTypeText     RichTextType = "text"
	RichTextTypeMention  RichTextType = "mention"
	RichTextTypeEquation RichTextType = "equation"
)

// RichTexts defines a model
type RichTexts []RichText

// Text objects contain this information within the `text` property of a RichText object.
type Text struct {
	// Text content. This field contains the actual content of your text and is probably the field you'll use most often.
	Content string `json:"content,omitzero"`
	// An inline link in a text.
	Link *Link `json:"link,omitempty"`
}

// UserReference defines a model
type UserReference struct {
	// Always "user"
	Object string    `json:"object,omitzero"`
	ID     uuid.UUID `json:"id,omitzero"`
}
